// TC O(M * N), SC O(N)

class Solution {
public:
    unordered_map<string, vector<pair<string, double>>> graph;
    
    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        vector<double> results;
        
        for(int i = 0; i < equations.size(); i++) {
            graph[equations[i][0]].push_back({equations[i][1], values[i]});
            graph[equations[i][1]].push_back({equations[i][0], 1 / values[i]});
        }
        
        for(auto &query: queries) {
            unordered_set<string> visited;
            results.push_back(dfs(visited, query[0], query[1], 1.0));
        }
        
        return results;
    }
    
    double dfs(unordered_set<string> &visited, string start, string end, double product) {
        if(graph.find(start) == graph.end()) return -1;
        if(graph.find(end) == graph.end()) return -1;
        
        visited.insert(start);
        
        if(start == end) {
            return product;
        }
            
        double result = -1;
        for(auto &pair: graph[start]) {
            if(visited.find(pair.first) == visited.end()) {
                result = dfs(visited, pair.first, end, product * pair.second);
                if(result != -1)
                    break;
            }
        }

        return result;
    }
};

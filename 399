// TC O(M * N), SC O(N)

class Solution {
public:
    unordered_map<string, vector<pair<string, double>>> graph;
    
    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        vector<double> results;
        
        for(int i = 0; i < equations.size(); i++) {
            graph[equations[i][0]].push_back({equations[i][1], values[i]});
            graph[equations[i][1]].push_back({equations[i][0], 1 / values[i]});
        }
        
        for(auto &query: queries) {
            unordered_set<string> visited;
            results.push_back(dfs(visited, query[0], query[1], 1.0));
        }
        
        return results;
    }
    
    double dfs(unordered_set<string> &visited, string start, string end, double product) {
        if(graph.find(start) == graph.end()) return -1;
        if(graph.find(end) == graph.end()) return -1;
        
        visited.insert(start);
        
        if(start == end) {
            return product;
        }
            
        double result = -1;
        for(auto &pair: graph[start]) {
            if(visited.find(pair.first) == visited.end()) {
                result = dfs(visited, pair.first, end, product * pair.second);
                if(result != -1)
                    break;
            }
        }

        return result;
    }
};

// TC O(N), SC O(N)

class Solution {
    unordered_map<string, string> parent;
    unordered_map<string, int> rank;
    unordered_map<string, double> value;
    
    void create_edge(string u) {
        if(parent.find(u) == parent.end()) {
            parent[u] = u;
            rank[u] = 1;
        }
    }
    
    string find_parent(string u) {
        if(parent[u] == u)
            return u;
        
        return parent[u] = find_parent(parent[u]);
    }
    
    void Union(string u, string v) {
        string parent_u = find_parent(u), parent_v = find_parent(v);
        
        if(parent_u != parent_v) {
            if(rank[parent_u] < rank[parent_v])
                swap(parent_u, parent_v);
            
            parent[parent_v] = parent_u;
            rank[parent_u] += rank[parent_v];
        }
    }
public:
    vector<double> calcEquation(vector<vector<string>>& equations, vector<double>& values, vector<vector<string>>& queries) {
        vector<double> result (queries.size(), -1);
        
        for(auto &equation: equations) {
            string u = equation[0], v = equation[1];
            
            create_edge(u);
            create_edge(v);
            Union(u, v);
        }
        
        for(auto &p: parent) {
            if(p.first == p.second)
                value[p.first] = 1;
        }        
        
        while(value.size() < parent.size()) {
            for(int i = 0; i < equations.size(); i++) {
                
                string u = equations[i][0], v = equations[i][1];
                if(value.find(u) == value.end() && value.find(v) == value.end()) {
                    continue;
                }
                else if(value.find(u) == value.end()) {
                    value[u] = value[v] / (values[i]);
                }
                else if(value.find(v) == value.end()){
                    value[v] = value[u] * values[i];
                }
            }
        }
        
        for(int i = 0; i < queries.size(); i++) {
            string u = queries[i][0], v = queries[i][1];
            
            if(parent.find(u) == parent.end() || parent.find(v) == parent.end() || find_parent(u) != find_parent(v)) {
                continue;
            }
            else {
                result[i] = value[v] / value[u];
            }
        }
        
        return result;
    }
};

// TC O(N), SC O(N)

class Solution {
public:
    vector<vector<int>> adj_list;
    string labels = "";
    vector<int> countSubTrees(int n, vector<vector<int>>& edges, string labels) {
        this -> adj_list.assign(n, vector<int> ());
        this -> labels = labels;
        
        for(auto &edge: edges) {
            adj_list[edge[0]].push_back(edge[1]);
            adj_list[edge[1]].push_back(edge[0]);
        }
        
        vector<int> ans(n, 0);
        DFS(0, -1, ans);
        
        return ans;
    }
    
    vector<int> DFS(int curr_node, int parent, vector<int> &ans) {
        vector<int> char_count(26, 0);
        char_count[labels[curr_node] - 'a']++;
        
        for(int &next_node: adj_list[curr_node]) {
            if(next_node == parent) continue;
            vector<int> tmp_char_count = DFS(next_node, curr_node, ans);
            
            for(int i = 0; i < 26; i++)
                char_count[i] += tmp_char_count[i];
        }
        
        ans[curr_node] = char_count[labels[curr_node] - 'a'];
        return char_count;
    }
};

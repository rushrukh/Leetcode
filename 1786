const int MOD = 1e9 + 7;
class Solution {
public:
    vector<vector<pair<int, int>>> graph;
    vector<int> DP;
    vector<int> d;
    int n = 0;
    
    int countRestrictedPaths(int n, vector<vector<int>>& edges) {
        graph.assign(n + 1, vector<pair<int, int>>());
        DP.assign(n + 1, -1);
        this -> n = n;
        
        for(auto &edge: edges) {
            graph[edge[0]].push_back({edge[1], edge[2]});
            graph[edge[1]].push_back({edge[0], edge[2]});
        }
        
        d.assign(n + 1, INT_MAX);
        d[n] = 0;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> Q;
        Q.push({0, n});
        
        while(!Q.empty()) {
            int u = Q.top().second;
            Q.pop();
            
            for(auto &pair: graph[u]) {
                int v = pair.first, dw = pair.second;
                
                if(d[u] + dw < d[v]) {
                    d[v] = d[u] + dw;
                    Q.push({d[v], v});
                }
            }
        }
        
        return find_rpaths(1);
    }
    
    int find_rpaths(int u) {
        if(u == n) return 1;
        if(DP[u] != -1) return DP[u];
        
        DP[u] = 0;
        
        for(auto &next: graph[u]) {
            int v = next.first;
            
            if(d[v] < d[u]) {
                DP[u] = (DP[u] + find_rpaths(v)) % MOD;
            }
        }
        
        return DP[u];
    }
};

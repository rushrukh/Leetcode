// BS, TC - O(NlogN), SC - O(1)

class Solution {
public:
    vector<int> nums;
    int n = 0;
    long long countFairPairs(vector<int>& nums, int lower, int upper) {
        sort(nums.begin(), nums.end());
        this -> nums = nums, this -> n = nums.size();
        long long answer = 0;
        
        for(int i = 0; i < n - 1; i++) {
            int min_v = lower - nums[i], max_v = upper - nums[i];
            int leftmost_ = find_min_value(min_v, i + 1), rightmost_ = find_max_value(max_v, i + 1);
            if(rightmost_ < leftmost_ || rightmost_ == -1 || leftmost_ == -1) continue;
            
            answer += rightmost_ - leftmost_ + 1;
        }
        
        return answer;
    }
    
    int find_min_value(int &min_v, int l) {
        int left = left, right = n - 1, answer = -1;
        
        while(left <= right) {
            int mid = left + (right - left) / 2;
            
            if(nums[mid] < min_v) left = mid + 1;
            else {
                answer = mid;
                right = mid - 1;
            }
        }
        
        return answer;
    }
    
    int find_max_value(int &max_v, int l) {
        int left = left, right = n - 1, answer = -1;
        
        while(left <= right) {
            int mid = left + (right - left) / 2;
            
            if(nums[mid] > max_v) right = mid - 1;
            else {
                answer = mid;
                left = mid + 1;
            }
        }
        
        return answer;
    }
};

//KnapSack Recursion Trial O(2^n)

class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        vector<vector<int>> v
        return calcCost(cost, cost.size());
    }
    int calcCost(vector<int>& cost, int n) {
        if(n == 0 || n == 1) return 0;
        
        return min(calcCost(cost, n - 1) + cost[n - 1], calcCost(cost, n - 2) + cost[n - 2]);
    }
};

// DP Trial O(n)

class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int first = cost[0], second = cost[1];
        
        for(int i = 2; i < cost.size(); i++){
            int curr = min(first, second) + cost[i];
            first = second, second = curr;
        }
        
        return min(first, second);
    }
};

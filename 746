// Knapsack Top Down O(2^n)

class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        return min(calc_cost(cost, cost.size() - 1), calc_cost(cost, cost.size() - 2));
    }
    
    int calc_cost(vector<int> &cost, int i) {
        if(i == 0 || i == 1)
            return i == 0 ? cost[0] : cost[1];
        
        return cost[i] + min(calc_cost(cost, i - 1), calc_cost(cost, i - 2));
    }
};

// Knapsack Top Down Memoization: TC O(N), SC O(N)

class Solution {
public:
    vector<int> DP;
    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        DP.assign(n, -1);
        DP[0] = cost[0], DP[1] = cost[1];
        
        find_min(cost, n - 1);
        return min(DP[n - 1], DP[n - 2]);
    }
    
    int find_min(vector<int> &cost, int i) {
        if(i < 2) return i == 1 ? DP[1] = cost[1] : DP[0] = cost[0];
        if(DP[i] != -1) return DP[i];
        
        return DP[i] = cost[i] + min(find_min(cost, i - 1), find_min(cost, i - 2));
    }
};

// Knapsack Bottom Up: TC O(N), SC O(N)

class Solution {
public:
    
    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size();
        vector<int> DP(n + 1, -1);
        DP[0] = 0, DP[1] = cost[0], DP[2] = cost[1];
        
        for(int i = 2; i < n; i++) {
            DP[i + 1] = cost[i] + min(DP[i], DP[i - 1]);
        }
        
        return min(DP[n], DP[n - 1]);
    }
};

// Bottom Up: TC O(N), SC O(1)

class Solution {
public:
    
    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size(), prev = cost[0], curr = cost[1];
        
        for(int i = 2; i < n; i++) {
            int next = cost[i] + min(prev, curr);
            prev = curr;
            curr = next;
        }
        
        return min(prev, curr);
    }
};

//KnapSack Recursion Trial O(2^n)

class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        return min(calc_cost(cost, cost.size() - 1), calc_cost(cost, cost.size() - 2));
    }
    
    int calc_cost(vector<int> &cost, int i) {
        if(i == 0 || i == 1)
            return i == 0 ? cost[0] : cost[1];
        
        return cost[i] + min(calc_cost(cost, i - 1), calc_cost(cost, i - 2));
    }
};

// DP Trial O(n)

class Solution {
public:
    int minCostClimbingStairs(vector<int>& cost) {
        int first = cost[0], second = cost[1];
        
        for(int i = 2; i < cost.size(); i++){
            int curr = min(first, second) + cost[i];
            first = second, second = curr;
        }
        
        return min(first, second);
    }
};

// Min-Heap + HashMap Soln: TC O(N logk) SC O(N + k)

class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int, int> hash;
        vector<int> result;
        
        for(int &num: nums)
            hash[num]++;
        
        auto comp = [&hash](int &i, int &j) {
            return hash[i] > hash[j];  
        };
        
        priority_queue<int, vector<int>, decltype(comp)> Q(comp);
        
        for(auto &x: hash) {
            Q.push(x.first);
            
            if(Q.size() > k)
                Q.pop();
        }
        
        while(!Q.empty()) {
            result.push_back(Q.top());
            Q.pop();
        }
        
        return result;
    }
};


// QuickSelect TC O(N), SC O(N)

class Solution {
public:
    unordered_map<int, int> hash;
    vector<int> unique;
    vector<int> topKFrequent(vector<int>& nums, int k) {
        vector<int> result (k, 0);
        for(int &num: nums)
            hash[num]++;
        
        for(auto &pair: hash)
            unique.push_back(pair.first);
        
        int left = 0, right = unique.size() - 1;
        k = unique.size() - k;
        
        while(left <= right) {
            int p = partition(left, right);
            if(p == k)
                break;
            
            else if(p < k)
                left = p + 1;
            
            else
                right = p - 1;
        }
        
        copy(unique.begin() + k, unique.end(), result.begin());
        return result;
    }
    
    int partition(int left, int right) {
        int pivot_index = left + rand() % (right - left + 1);
        swap(unique[pivot_index], unique[right]);
        
        int pivot_value = hash[unique[right]], p = left;
        
        for(int i = left; i < right; i++) {
            if(hash[unique[i]] <= pivot_value)
                swap(unique[i], unique[p++]);
        }
        
        swap(unique[right], unique[p]);
        
        return p;
    }
};

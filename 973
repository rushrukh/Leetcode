//Sorting Soln: TC O(NlogN), SC O(logN)

class Solution {
public:
    static bool compare(vector<int> A, vector<int> B) {
        return (A[0] * A[0] + A[1] * A[1]) < (B[0] * B[0] + B[1] * B[1]);
    }
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        sort(points.begin(), points.end(), compare);
        
        return vector<vector<int>>(points.begin(), points.begin() + k);
    }
};


//Priority Queue (Max-Heap) Soln: TC O(Nlogk), SC O(k)

class Solution {
public:
    int get_distance(vector<int> x) {
        return x[0] * x[0] + x[1] * x[1];
    }
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        priority_queue<pair<int, int>> Q;
        
        for(int i = 0; i < points.size(); i++) {
            Q.push({get_distance(points[i]), i});
            
            if(Q.size() > k)
                Q.pop();
        }
        
        vector<vector<int>> result;
        while(!Q.empty()) {
            result.push_back(points[Q.top().second]);
            Q.pop();
        }
        
        return result;
    }
};

// Max-heap keeps the max value at the top.
// say k = 3
// we have 3 values pushed into max_heap
// now, we are at the 4th element.
// Say, 4th element's euclidean distance is smaller.
// it is a good element for the result
// then someone needs to go out of the queue right?
// which one goes out? the biggest one
// Nice, unlike min_heap, we have it at the top of the queue.


// Binary Search Soln: TC O(N log(max_distance) SC O(N)

class Solution {
public:
    int calc_distance(vector<int> &point) {
        return point[0] * point[0] + point[1] * point[1];
    }
    vector<vector<int>> check_these_points (vector<int> &check_these, vector<vector<int>> &points, int target) {
        vector<int> closer, farther;
        vector<vector<int>> result;
        
        for(int i = 0; i < check_these.size(); i++) {
            if(calc_distance(points[check_these[i]]) <= target) {
                closer.push_back(check_these[i]);
            }
            else {
                farther.push_back(check_these[i]);
            }
        }
        
        result.push_back(closer);
        result.push_back(farther);
        
        return result;
    }
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        double low = 0, high = 0;
        vector<int> check_these;
        vector<vector<int>> answer;
        
        for(int i = 0; i < points.size(); i++) {
            check_these.push_back(i);
            double dist = calc_distance(points[i]);
            high = max(high, dist);
        }
        
        while(k) {
            double mid = low + (high - low) / 2;
            vector<vector<int>> result = check_these_points(check_these, points, mid);
            vector<int> closer = result[0], farther = result[1];
            
            if(closer.size() <= k) {
                for(auto &idx: closer) {
                    answer.push_back(points[idx]);
                    k--;
                }
                
                check_these = farther;
                low = mid + 1;
            }
            else {
                check_these = closer;
                high = mid - 1;
            }
        }
        
        return answer;
    }
};


// TC O(N), SC O(N)

class Solution {
public:
    int get_distance(vector<int> x) {
        return x[0] * x[0] + x[1] * x[1];
    }
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        int left = 0, right= points.size() - 1;
        
        while(left < right) {
            int idx = partition(points, left, right);
            
            if(idx == k) break;
            else if(idx < k)
                left = idx + 1;
            else
                right = idx - 1;
        }
        
        return vector<vector<int>> (points.begin(), points.begin() + k);
    }
    int partition(vector<vector<int>> &points, int left, int right) {
        int pivot = left + rand() % (right - left + 1);
        swap(points[pivot], points[right]);
        
        int p = left;
        int pivot_distance = get_distance(points[right]);
        for(int i = left; i < right; i++) {
            if(get_distance(points[i]) <= pivot_distance) {
                swap(points[i], points[p++]);
            }
        }
        
        swap(points[p], points[right]);
        
        return p;
    }
};

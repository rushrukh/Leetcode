//Sorting Soln: TC O(NlogN), SC O(logN)

class Solution {
public:
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        sort(points.begin(), points.end(), [] (const vector<int> &A, const vector<int> &B) {
            return A[0] * A[0] + A[1] * A[1] < B[0] * B[0] + B[1] * B[1];
        });
        
        return vector<vector<int>> (points.begin(), points.begin() + k);
    }
};


//Priority Queue (Max-Heap) Soln: TC O(Nlogk), SC O(k)

class Solution {
public:
    int calc_distance(vector<int> &point) {
        return point[0] * point[0] + point[1] * point[1];
    }
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        // max_heap is maintained by the distance, but we also need the idx for the ans;
        priority_queue<pair<int,int>> Q;
        vector<vector<int>> result;
        
        for(int i = 0; i < points.size(); i++) {
            pair<int, int> current_point = {calc_distance(points[i]), i};
            
            if(Q.size() < k)
                Q.push(current_point);
            else {
                if(current_point.first < Q.top().first) {
                    Q.pop();
                    Q.push(current_point);
                }
            }
        }
        
        while(!Q.empty()) {
            int p = Q.top().second;
            Q.pop();
            result.push_back(points[p]);
        }
        
        return result;
    }
};

// Max-heap keeps the max value at the top.
// say k = 3
// we have 3 values pushed into max_heap
// now, we are at the 4th element.
// Say, 4th element's euclidean distance is smaller.
// it is a good element for the result
// then someone needs to go out of the queue right?
// which one goes out? the biggest one
// Nice, unlike min_heap, we have it at the top of the queue.


// Binary Search Soln: TC O(N) SC O(N)

class Solution {
public:
    int calcEuclideanDistance(vector<int>& coordinates) {
        return coordinates[0] * coordinates[0] + coordinates[1] * coordinates[1];
    }
    vector<vector<int>> splitPointsArray(vector<vector<int>>& points, vector<int>& checkThesePoints, int targetDistance) {
        vector<int> closer;
        vector<int> farther;
        vector<vector<int>> result;
        
        for(int i = 0; i < checkThesePoints.size(); i++) {
            if(calcEuclideanDistance(points[checkThesePoints[i]]) <= targetDistance) {
                closer.push_back(checkThesePoints[i]);
            }
            else {
                farther.push_back(checkThesePoints[i]);
            }
        }
        result.push_back(closer);
        result.push_back(farther);
        return result;
    }
    vector<vector<int>> kClosest(vector<vector<int>>& points, int k) {
        //O(N) solution using Binary Search
        
        // BS Idea: let's think of a random target distance from origin, a distance of 10.
        // Now if we traverse the points, where if the current distance is < 10, we add it to our answer.
        // Three possible cases here.
        // 1. We will have > k points in the answer.
        // 2. We will have < k points in the answer.
        // 3. We will have = k points in the answer.
        // Let's think of each of the cases separately.
        // 1. We got more than k points. Let's think in numbers. Say we are to return k = 3 closest points to origin.
        // We got 5 points in our ans array, why? Because our target distance is 10. That means, we should have a smaller target distance.
        // Perhaps if we have target distance = 6, then we might get k = 2 points in our ans array.
        // 2. We got less than k points. Let's think in numbers. Say we are to return k = 3 closest points to origin.
        // We got 1 point in our ans array, why? Because our target distance is 10. That means, there are not many points who's distance is
        // less than 10. So, if we want to include more points in our result array, we need to increase the target distance, perhaps to 15? who knows.
        
        // 3. Bull's eye. We hit the right target, let's just return the result.
        // IT DOES LOOK LIKE A TRICKY BINARY SEARCH!! 
        
        // Let's try to narrow down this idea, in terms of asking the right questions.
        
        // Questions
        // 1. How do we know what range of targets to try?
        // 2. What is the complexity of this binary search approach?
        
        // 1. We can define low = 0, and high = maxDistanceInPointsArray. And search using the mid point. Then based on how many points we get, we change
        // low = mid or high = mid.
        // If everytime, we consider N points in the array to be checked if it falls within the target distance, it becomes N log T
        // If we take out some possibilities from the N points in each search, we have a reduced number of points every time.   
        
        vector<vector<int>> closest;
        double low = 0, high = INT_MIN;

        vector<int> checkThesePoints;
        for(int i = 0; i < points.size(); i++) {
            double distance = calcEuclideanDistance(points[i]);
            high = max(high, distance);
            checkThesePoints.push_back(i);
        }
        
        while(k) {
            double mid = low + (high - low) / 2;
            vector<vector<int>> result = splitPointsArray(points, checkThesePoints, mid);
            vector<int> closer = result[0];
            vector<int> farther = result[1];

            if(closer.size() <= k) {
                for(auto &x: closer) {
                    closest.push_back({points[x][0], points[x][1]});
                    k--;
                }
                checkThesePoints = farther;
                low = mid;

            }
            else if(closer.size() > k) {
                checkThesePoints = closer;
                high = mid;
            }
        }
        
        return closest;
    }
};

// Complexity Analysis:
// TC: O(N + E) where N = number of people and E = edges between number of people
// We have to iterate through all the nodes in the graph. For each node we will also have to traverse all the edges.
// SC: O(N + E) due to the adjacency list

class Solution {
public:
    bool possibleBipartition(int n, vector<vector<int>>& dislikes) {
        vector<int> color(n + 1, -1);
        queue<int> Q;
        
        vector<vector<int>> graph(n + 1);
        
        for(int i = 0; i < dislikes.size(); i++) {
            graph[dislikes[i][0]].push_back(dislikes[i][1]);
            graph[dislikes[i][1]].push_back(dislikes[i][0]);
        }
        
        for(int i = 0; i < color.size(); i++) {
            if(color[i] == -1) {
                color[i] = 0;
                Q.push(i);
                
                while(!Q.empty()) {
                    int node = Q.front();
                    Q.pop();
                    
                    for(int j = 0; j < graph[node].size(); j++) {
                        if(color[graph[node][j]] == -1) {
                            color[graph[node][j]] = color[node] ^ 1;
                            Q.push(graph[node][j]);
                        }
                        else if(color[graph[node][j]] == color[node]) {
                            return false;
                        }
                    }
                }
            }
        }
        
        return true;
    }
};

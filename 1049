class Solution {
public:
    int DP[31][10000];
    int lastStoneWeightII(vector<int>& stones) {
        int totalSum = accumulate(stones.begin(), stones.end(), 0);
        int halfOfTotal = totalSum / 2;
        memset(DP, -1, sizeof(DP));
        int asCloseAsHalfWouldBe = calcMaxHalf(stones, 0, halfOfTotal);
        
        return totalSum + (2 * asCloseAsHalfWouldBe) - (2 * halfOfTotal);
        // return asCloseAsHalfWouldBe;
    }
    
    int calcMaxHalf(vector<int>& stones, int idx, int halfOfTotal) {
        // cases:
        // idx == stones.size(), then we'll return
        // else, we can either choose an element, or not choose
        // That's it.
        if(halfOfTotal < 0) return INT_MAX - 1;
        if(idx == stones.size() || !halfOfTotal) return halfOfTotal;
        if(DP[idx][halfOfTotal] != -1) return DP[idx][halfOfTotal];
        
        // we see if we can choose an element
        return DP[idx][halfOfTotal] = min(calcMaxHalf(stones, idx + 1, halfOfTotal - stones[idx]), calcMaxHalf(stones, idx + 1, halfOfTotal));
    }
};


// Smashing two rocks gives two types of outcome
// y - x = 0 if y == x
// y - x = whatever, if y > x

// Looks a lot like regular subtraction
// If translated, here is what the problem asks:

// You are given an array with some integers
// you take some integers and form a group, and form another group with the rest of the elements
// Now, you subtract the sum of these two groups
// Here's the catch, the output of the subtraction has to be minimized
// In other words, the result of the subtraction has to be the smallest possible result of all the subtraction result possible in the group


// that being said
// How can we minimize the result of subtraction?

// well we know the total sum of the array to be some x;
// we know that, the minimum val of subtraction is nothing but 0;
// we achieve 0 as a result of subtraction, if both value partaking in the subtraction are equal.
// that means both of them have of the half(x) | half(x) - half(x) = 0;


// So, we can try to think about constructing one half, the other half would be just total_sum - the_half_we_will_construct
// On what criteria should we find the half that we are talking about?

// We should try to maximize the value for the half that we are taking care of, without exceeding half(total_sum);
// That will give us maximum possible half.

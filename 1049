class Solution {
public:
    int lastStoneWeightII(vector<int>& stones) {
        int totalSum = 0;
        for(auto& x: stones) totalSum += x;
        int subsetSum = totalSum / 2;
        
        vector<vector<int>> DP (stones.size(), (vector<int> (subsetSum + 1, -1)));
        int maximizedSum = findMaximizedSum(DP, stones, subsetSum, 0, 0);
        
        return (totalSum - maximizedSum) - maximizedSum;
    }
    int findMaximizedSum(vector<vector<int>>& DP, vector<int>& stones, int targetSum, int idx, int currSum) {
        if(idx == stones.size()) return currSum;
        if(DP[idx][currSum] != -1) return DP[idx][currSum];
        
        if(currSum + stones[idx] <= targetSum) return DP[idx][currSum] = max(findMaximizedSum(DP, stones, targetSum, idx + 1, currSum + stones[idx]), findMaximizedSum(DP, stones, targetSum, idx + 1, currSum));
        else return DP[idx][currSum] = findMaximizedSum(DP, stones, targetSum, idx + 1, currSum);
    }
};

// TC O(log n), SC O(1)

class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int low = 0, high = nums.size() - 1;
        
        while(low < high) {
            int mid = low + (high - low) / 2;
            int even_halves = (high - mid) % 2 == 0;
            
            if(even_halves) {
                if(nums[mid] == nums[mid + 1])
                    low = mid + 2;
                else if(nums[mid] == nums[mid - 1])
                    high = mid - 2;
                else 
                    return nums[mid];
            }
            else {
                if(nums[mid] == nums[mid + 1])
                    high = mid - 1;
                else if(nums[mid] == nums[mid - 1])
                    low = mid + 1;
                else 
                    return nums[mid];
            }
        }
        
        return nums[low];
    }
};

/*


- only one number not in pair, everybody else is in pair.
- length of array always odd.
- in BS, the side that's 'organically' uneven, has our answer

- left and right side of mid can be both even and odd
- 1 2 2 4 4       l = 0 h = 4, m = 2
- 1 1 3 3 4 5 5   l = 0 h = 6, m = 3

1.1:    1 1 2 2 4
1.2:    1 2 2 4 4
2.1:    1 1 2 3 3 5 5
2.2:    1 1 3 3 4 5 5


1. halves are even 
    1.1 mid and mid + 1 can be pair: low = mid + 2 
    1.2 mid and mid - 1 can be pair: high = mid mid - 2
2. halves are odd 
    2.1 mid and mid + 1 can be pair: high = mid - 1
    2.2 mid and mid - 1 can be pair: low = mid + 1

1 1 3 3 4 5 5
0 1 2 3 4 5 6

l = 0, h = 6, m = 3, eh = 0
l = 4, h = 6, m = 5, eh = 0
l = 4, h = 4 uh oh

*/

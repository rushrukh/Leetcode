// TC O(log n), SC O(1)

class Solution {
public:
    int singleNonDuplicate(vector<int>& nums) {
        int low = 0, high = nums.size() - 1;
        
        while(low < high) {
            int mid = low + (high - low) / 2;
            int halvesAreEven = (high - mid) % 2 == 0;
            if(nums[mid] == nums[mid + 1]) {
                if(halvesAreEven) low = mid + 2;
                else high = mid - 1;
                
            }
            else if(nums[mid] == nums[mid - 1]) {
                if(halvesAreEven) high = mid - 2;
                else low = mid + 1;
            }
            else return nums[mid];
        }
        return nums[high];
    }
};

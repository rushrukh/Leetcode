// TC O(n), SC O(1)

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        vector<int> left(nums.size(), 1), right(nums.size(), 1);
        
        for(int i = 1; i < nums.size(); i++) 
            left[i] = left[i - 1] * nums[i - 1];
        
        for(int i = nums.size() - 2; i >= 0; i--) 
            right[i] = right[i + 1] * nums[i + 1];
        
        for(int i = 0; i < nums.size(); i++) 
            nums[i] = left[i] * right[i];
        
        return nums;
    }
};

// TC O(n), SC O(1)

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size(), suffix = 1;
        vector<int> ans(n, 1);
        
        for(int i = 1; i < n; i++) {
            ans[i] = ans[i - 1] * nums[i - 1];
        }
        
        for(int i = n - 1; i >= 0; i--) {
            ans[i] *= suffix;
            suffix *= nums[i];
        }
        
        return ans;
    }
};

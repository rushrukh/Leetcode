// TC O(N), SC O(N)

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> boundaries;
    vector<int> boundaryOfBinaryTree(TreeNode* root) {
        if(!root) return {};
        
        boundaries.push_back(root -> val);
        left_boundaries(root -> left);
        leaves(root -> left);
        leaves(root -> right);
        right_boundaries(root -> right);
        
        return boundaries;
    }
    
    void left_boundaries(TreeNode* root) {
        if(!root || (!root -> left && !root -> right)) return;
        boundaries.push_back(root -> val);
        
        if(root -> left)
            left_boundaries(root -> left);
        else
            left_boundaries(root -> right);
    }
    
    void leaves(TreeNode* root) {
        if(!root) return;
        
        leaves(root -> left);
        
        if(!root -> left && !root -> right)
            boundaries.push_back(root -> val);
        
        leaves(root -> right);
    }
    
    void right_boundaries(TreeNode* root) {
        if(!root || (!root -> left && !root -> right)) return;
        
        if(root -> right)
            right_boundaries(root -> right);
        else
            right_boundaries(root -> left);
        
        boundaries.push_back(root -> val);
    }
};

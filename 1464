// TC O(NlogN), SC O(N)

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        priority_queue<int> pQ;
        
        for(auto &x: nums)
            pQ.push(x);
        
        int result = pQ.top() - 1;
        pQ.pop();
        return result * (pQ.top() - 1);
    }
};

?? TC O(N), SC O(1)

class Solution {
public:
    int maxProduct(vector<int>& nums) {
        make_heap(nums.begin(), nums.end());
        int largest = --nums[0];
        
        pop_heap(nums.begin(), nums.end());
        int secondLargest = --nums[0];
        
        return largest * secondLargest;
    }
};

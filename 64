//Top Down Soln:

class Solution {
public:
    int DP[201][201];
    int minPathSum(vector<vector<int>>& grid) {
        memset(DP, -1, sizeof(DP));
        return helper(grid, 0, 0);
    }
    int helper(vector<vector<int>>& grid, int row, int col) {
        if(row >= grid.size() || col >= grid[0].size()) return INT_MAX;
        if(DP[row][col] != -1) return DP[row][col];
        if(row == grid.size() - 1 && col == grid[0].size() - 1) return DP[row][col] = grid[row][col];
        
        return DP[row][col] = min(helper(grid, row + 1, col), helper(grid, row, col + 1)) + grid[row][col];
    }
};

//Bottom Up Soln:

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int DP[grid.size()][grid[0].size()];
        
        DP[0][0] = grid[0][0];
        for(int i = 1; i < grid[0].size(); i++) 
            DP[0][i] = DP[0][i - 1] + grid[0][i];
        
        for(int i = 1; i < grid.size(); i++) 
            DP[i][0] = DP[i - 1][0] + grid[i][0];
        
        for(int i = 1; i < grid.size(); i++) 
            for(int j = 1; j < grid[0].size(); j++) 
                DP[i][j] = min(DP[i - 1][j], DP[i][j - 1]) + grid[i][j];
        
        return DP[grid.size() - 1][grid[0].size() - 1];
    }
};

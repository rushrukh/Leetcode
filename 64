//Top Down Soln:

class Solution {
public:
    int row = 0, col = 0;
    vector<vector<int>> grid, DP;
    int minPathSum(vector<vector<int>>& grid) {
        this -> row = grid.size(), this -> col = grid[0].size();
        this -> grid = grid;
        DP.assign(row, vector<int> (col, -1));
        
        return find_sum(row - 1, col - 1);
    }
    
    int find_sum(int i, int j) {
        if(i < 0 || j < 0) return INT_MAX;
        if(!i && !j) return grid[i][j];
        if(DP[i][j] != -1) return DP[i][j];
        
        return DP[i][j] = grid[i][j] + min(find_sum(i - 1, j), find_sum(i, j - 1));
    }
};

//Bottom Up Soln:

class Solution {
public:
    int minPathSum(vector<vector<int>>& grid) {
        int DP[grid.size()][grid[0].size()];
        
        DP[0][0] = grid[0][0];
        for(int i = 1; i < grid[0].size(); i++) 
            DP[0][i] = DP[0][i - 1] + grid[0][i];
        
        for(int i = 1; i < grid.size(); i++) 
            DP[i][0] = DP[i - 1][0] + grid[i][0];
        
        for(int i = 1; i < grid.size(); i++) 
            for(int j = 1; j < grid[0].size(); j++) 
                DP[i][j] = min(DP[i - 1][j], DP[i][j - 1]) + grid[i][j];
        
        return DP[grid.size() - 1][grid[0].size() - 1];
    }
};

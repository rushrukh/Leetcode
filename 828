// TC O(N), SC O(N)

class Solution {
public:
    int uniqueLetterString(string s) {
        int n = s.size(), count = 0;
        unordered_map<char, vector<int>> hash;
        
        for(int i = 0; i < n; i++) {
            hash[s[i]].push_back(i);
        }
        
        for(auto &[key, indices]: hash) {
            for(int i = 0; i < indices.size(); i++) {
                int left = i == 0 ? indices[i] : indices[i] - indices[i - 1] - 1;
                int right = i == indices.size() - 1? n - indices[i] - 1 : indices[i + 1] - indices[i] - 1;
                count += (left + 1) + (left + 1) * right;
            }
        }
        
        return count;
    }
};


// TC O(N), SC O(N)

class Solution {
public:
    int uniqueLetterString(string s) {
        int n = s.size(), count = 0;
        unordered_map<char, vector<int>> hash;
        
        for(int i = 0; i < n; i++) {
            hash[s[i]].push_back(i);
        }
        
        for(auto &[key, indices]: hash) {
            for(int i = 0; i < indices.size(); i++) {
                int left = i == 0 ? indices[i] + 1 : indices[i] - indices[i - 1];
                int right = i == indices.size() - 1 ? n - indices[i] : indices[i + 1] - indices[i];
                
                count += (left * right);
            }
        }
        
        return count;
    }
};

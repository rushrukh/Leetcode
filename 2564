class Solution {
public:
    vector<vector<int>> substringXorQueries(string s, vector<vector<int>>& queries) {
        unordered_map<long long, vector<int>> hash;
        int n = s.size();
        
        for(int i = 0; i < n; i++) {
            if(s[i] == '0') {
                if(hash.find(0) == hash.end()) hash[0] = {i, i};
                continue;
            }
            
            for(int j = i; j < n && j - i < 31; j++) {
                string curr_substr = s.substr(i, j - i + 1);
                long long decimal_val = get_decimal(curr_substr);
                
                if(hash.find(decimal_val) == hash.end())
                    hash[decimal_val] = {i, j};
            }
        }
        
        vector<vector<int>> answer;
        for(auto &query: queries) {
            long long v = query[0] ^ query[1];
            if(hash.find(v) != hash.end())
                answer.push_back(hash[v]);
            else answer.push_back({-1, -1});
        }
        
        return answer;
    }
    
    long long get_decimal(string &x) {
        long long answer = 0;
        int n = x.size();
        
        for(int i = 0; i < n; i++)
            answer += (pow(2, i) * (x[n - i - 1] - '0'));
        
        return answer;
    }
};

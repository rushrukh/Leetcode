/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 
 //Bit manipulation:
 
class Solution {
public:
    int paths = 0;
    int pseudoPalindromicPaths (TreeNode* root) {
        int checkOddOccurrence = 0;
        DFS(root, checkOddOccurrence);
        return paths;
    }
    
    int DFS(TreeNode* root, int checkOddOccurrence) {
        if(!root)
            return 0;
        
        checkOddOccurrence ^= 1 << (root -> val - 1); 
        if((!root -> left && !root -> right) && !(checkOddOccurrence & (checkOddOccurrence - 1)))
            paths++;
        
        return DFS(root -> left, checkOddOccurrence) + DFS(root -> right, checkOddOccurrence);
    }
};

//Hash set: 

class Solution {
public:
    int paths = 0;
    int pseudoPalindromicPaths (TreeNode* root) {
        unordered_set<int> hashSet;
        DFS(root, hashSet);
        return paths;
    }
    
    int DFS(TreeNode* root, unordered_set<int> hashSet) {
        if(!root)
            return 0;
        
        auto it = hashSet.find(root -> val);
        if(it != hashSet.end())
            hashSet.erase(it);
        else
            hashSet.insert(root -> val);
        
        if((!root -> left && !root -> right) && (hashSet.size() == 1 || hashSet.size() == 0))
            paths++;
        
        return DFS(root -> left, hashSet) + DFS(root -> right, hashSet);
    }
};

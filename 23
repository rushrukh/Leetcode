// Naive max-heap soln: TC O(Nk log (Nk), SC O(Nk)

class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        priority_queue<pair<int, ListNode*>> Q;
        ListNode* head = NULL;
        
        for(auto x: lists) {
            while(x) {
                Q.push({x -> val, x});
                x = x -> next;
            }
        }
        
        while(!Q.empty()) {
            ListNode* tmp = Q.top().second;
            Q.pop();
            tmp -> next = head;
            head = tmp;
        }
        
        return head;
    }
};


// Optimal Min-heap Soln: TC O(N log k), SC O(k)
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        ListNode* head = new ListNode(0);
        ListNode* dummyHead = head;
        auto comp = [](ListNode* A, ListNode *B) {
            return A -> val > B -> val;
        };
        priority_queue<ListNode*, vector<ListNode*>, decltype(comp)> Q(comp);
        
        for(auto x: lists) {
            if(x) Q.push(x);
        }
        
        while(!Q.empty()) {
            ListNode* tmp = Q.top();
            Q.pop();
            
            dummyHead -> next = tmp;
            dummyHead = dummyHead -> next;
            
            if(tmp && tmp -> next) Q.push(tmp -> next);
        }
        
        return head -> next;
    }
};

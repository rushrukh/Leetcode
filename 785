// TC O(V + E), SC O(V) - to store the colors [BFS Implementation]

class Solution {
public:
    bool isBipartite(vector<vector<int>>& graph) {
        vector<int> color (graph.size(), -1);
        queue<int> Q;
        Q.push(0);
        
        for(int x = 0; x < graph.size(); x++) {
            if(color[x] == -1) {
                color[x] = 0;
                Q.push(x);
                while(!Q.empty()) {
                    int node = Q.front();
                    Q.pop();

                    for(int i = 0; i < graph[node].size(); i++) {
                        if(color[graph[node][i]] == -1) {
                            color[graph[node][i]] = color[node] ^ 1;
                            Q.push(graph[node][i]);
                        }
                        else {
                            if(color[graph[node][i]] == color[node]) return false;
                        }
                    }
                }
            }
            
        }
        
        return true;
    }
};

// Iterative Stack Solution:

class Solution {
public:
    bool isBipartite(vector<vector<int>>& graph) {
        vector<int> color (graph.size(), -1);
        stack<int> stk;
        
        for(int x = 0; x < graph.size(); x++) {
            if(color[x] == -1) {
                color[x] = 0;
                stk.push(x);
                while(!stk.empty()) {
                    int node = stk.top();
                    stk.pop();

                    for(int i = 0; i < graph[node].size(); i++) {
                        if(color[graph[node][i]] == -1) {
                            color[graph[node][i]] = color[node] ^ 1;
                            stk.push(graph[node][i]);
                        }
                        else {
                            if(color[graph[node][i]] == color[node]) return false;
                        }
                    }
                }
            }
            
        }
        
        return true;
    }
};

// Recursive DFS Solution:

class Solution {
public:
    bool isBipartite(vector<vector<int>>& graph) {
        vector<int> color (graph.size(), -1);
        
        for(int i = 0; i < graph.size(); i++) {
            if(color[i] == -1)
                if(!dfs(graph, color, i)) return false;
        }
        
        return true;
    }
    bool dfs(vector<vector<int>>& graph, vector<int>& color, int node) {
        
        for(int i = 0; i < graph[node].size(); i++) {
            if(color[graph[node][i]] == -1) {
                color[graph[node][i]] = color[node] ^ 1;
                if(!dfs(graph, color, graph[node][i])) return false;
            }
            else {
                if(color[graph[node][i]] == color[node]) return false;
            }
        }
        
        return true;
    }
};

// 0 - blue
// 1 - red
// take one node
//      if no color assigned, assign 0
//          then visit it's neighbors one by one, assign them color to be 1            
//      else take its color
//          then visit it's neighbors one by one, assign them the opposite color

//  while visiting adjacent nodes for one guy, keep a check to see if the neighbor already has a color
//  if the color is opposite to the main guy, good work, keep it up
//  else, woah return false

// use a queue to decide what to visit next
// use color array to decide if the node has been visited already.

class Solution {
public:
    vector<int> parent, rank;
    bool isBipartite(vector<vector<int>>& graph) {
        int n = graph.size();
        
        for(int i = 0; i < n; i++) {
            parent.push_back(i);
            rank.push_back(1);
        }
        
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < graph[i].size(); j++) {
                if(find_parent(i) == find_parent(graph[i][j]))
                    return false;
                
                Union(graph[i][0], graph[i][j]);
            }
        }
        
        return true;
    }
    
    void Union(int u, int v) {
        int parent_u = find_parent(u), parent_v = find_parent(v);
        
        if(parent_u == parent_v)
            return;
        
        if(rank[parent_u] < rank[parent_v])
            swap(parent_u, parent_v);
        
        parent[parent_v] = parent_u;
        rank[parent_u] += rank[parent_v];
    }
    
    int find_parent(int x) {
        if(parent[x] == x)
            return x;
        
        return parent[x] = find_parent(parent[x]);
    }
};

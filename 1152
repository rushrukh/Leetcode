// TC O(n * m^3), SC O(n * m + mC3)

class Solution {
public:
    vector<string> mostVisitedPattern(vector<string>& username, vector<int>& timestamp, vector<string>& website) {
        unordered_map<string, map<int, string>> user_visits_website;
        unordered_map<string, int> sequence_frequency;
        int max_frequency = 0;
        string result = "";
        vector<string> pattern(3);
        
        for(int i = 0; i < username.size(); i++) {
            user_visits_website[username[i]][timestamp[i]] = website[i];
        }
        
        for(auto [user, time_websites]: user_visits_website) {
            unordered_set<string> three_sequences;
            
            for(auto it1 = begin(time_websites); it1 != time_websites.end(); it1++) {
                for(auto it2 = next(it1); it2 != time_websites.end(); it2++) {
                    for(auto it3 = next(it2); it3 != time_websites.end(); it3++) {
                        three_sequences.insert(it1 -> second + " " + it2 -> second + " " + it3 -> second + " ");
                    }
                }
            }
            
            for(auto seq: three_sequences) {
                sequence_frequency[seq]++;        
            }
        }
        
        for(auto &pair: sequence_frequency) {
            if(pair.second > max_frequency) {
                max_frequency = pair.second;
                result = pair.first;
            }
            else if(pair.second == max_frequency) {
                result = min(result, pair.first);
            }
        }
        
        istringstream ss(result);
        ss >> pattern[0] >> pattern[1] >> pattern[2];
        
        return pattern;
    }
};


/*

0. return three-sequence with max frequency
1. Before 0, count frequency for all possible three-sequence
2. Before 1, find all possible three-sequences
3. Before 2, find all the websites sorted in time

3. For each user, create a map<timestamp, website>

2. iterate for each user:
    - create a list of three-websites
    - store in a set
    
    1. - declare a <sequence, frequency> hash
       - for the current user, add all the sequences to the hash and +1 freq;

0. iterate through the list, find the one that has max frequency and return;    

*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<string> result;
    
    string createString(string str, int val) {
        return str + "->" + to_string(val);
    }
    
    vector<string> binaryTreePaths(TreeNode* root) {
        if(!root)
            return {};
        
        string subResult = to_string(root -> val);
        DFS(root -> left, subResult);
        DFS(root -> right, subResult);
        if(!result.size())
            result.push_back(subResult);
        
        return result;
    }
    
    void DFS(TreeNode* root, string subResult) {
        if(!root) {
            return;
        }
        
        subResult = createString(subResult, root -> val);
        
        if(!root -> left && !root -> right)
            result.push_back(subResult);
        
        DFS(root -> left, subResult);
        DFS(root -> right, subResult);
    }
};

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<string> result;
    vector<string> binaryTreePaths(TreeNode* root) {
        DFS(root, "");
        return result;
    }
    void DFS(TreeNode* root, string soFar) {
        if(!root) return;
        
        if(!soFar.length()) soFar += to_string(root -> val);
        else soFar = stringBuilder(soFar, to_string(root -> val));
        
        DFS(root -> left, soFar);
        DFS(root -> right, soFar);
        
        if(!root -> left && !root -> right) result.push_back(soFar);
    }
    
    string stringBuilder(string soFar, string latest) {
        return soFar + "->" + latest;
    }
};

// DFS TC O(M + N), SC O(M + N)

class Solution {
public:
    int destination = 0;
    unordered_map<int, vector<int>> adj_list;
    unordered_set<int> visited;
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
        this -> destination = destination;
        
        for(auto &edge: edges) {
            adj_list[edge[0]].push_back(edge[1]);
            adj_list[edge[1]].push_back(edge[0]);
        }
        
        return find_path(source);
    }
    
    bool find_path(int source) {
        if(source == destination) return true;
        
        for(auto &next: adj_list[source]) {
            if(visited.find(next) == visited.end()) {
                visited.insert(next);
                bool answer = find_path(next);
                if(answer) return true;
            }
        }
        
        return false;
    }
};

// DSU: TC O(m * alpha(n), SC O(n)

class Solution {
public:
    int n = 0;
    vector<int> parent, rank;
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
        this -> n = n;
        init_dsu();
        
        for(auto &edge: edges)
            Union(edge[0], edge[1]);
        
        return find_parent(source) == find_parent(destination);
    }
    
    void Union(int u, int v) {
        int parent_u = find_parent(u), parent_v = find_parent(v);
        if(parent_u == parent_v) return;
        
        if(rank[parent_u] < rank[parent_v])
            swap(parent_u, parent_v);
        
        parent[parent_v] = parent_u;
        rank[parent_u] += rank[parent_v];
        rank[parent_v] = 0;
    }
    
    int find_parent(int x) {
        if(parent[x] == x) return x;
        return parent[x] = find_parent(parent[x]);
    }
    
    void init_dsu() {
        for(int i = 0; i < n; i++) {
            parent.push_back(i);
            rank.push_back(1);
        }
    }
};

// TC O(N), SC O(N) - recursive call stack 

class Solution {
public:
    Node *first = NULL, *last = NULL;
    Node* treeToDoublyList(Node* root) {
        if(!root) return root;
        
        helper(root);
        first -> left = last;
        last -> right = first;
        
        return first;
    }
    
    void helper(Node* root) {
        if(!root) return;
        helper(root -> left);
        
        if(!first) first = root;
        
        if(last) {
            last -> right = root;
            root -> left = last;
        }
        
        last = root;
        helper(root -> right);
    }
};

// TC O(N), SC O(1) - Morris Traversal

class Solution {
public:
    Node* treeToDoublyList(Node* root) {
        if(!root) return root;
        
        Node* head = new Node();
        Node* prev = head;
        Node* curr = root;
        
        while(curr) {
            if(!curr -> left) {
                prev -> right = curr;
                curr -> left = prev;
                prev = curr;
                curr = curr -> right;
            }
            else {
                Node *inorder_predecessor = curr -> left;
                while(inorder_predecessor -> right)
                    inorder_predecessor = inorder_predecessor -> right;
                
                if(!inorder_predecessor -> right) {
                    inorder_predecessor -> right = curr;
                    Node *tmp = curr -> left;
                    curr -> left = NULL;
                    curr = tmp;
                }
            }
        }
        
        head = head -> right;
        prev -> right = head;
        head -> left = prev;
        return head;
    }
};

//Top Down Soln:

class Solution {
public:
    vector<int> coins;
    vector<vector<int>> DP;
    int coinChange(vector<int>& coins, int amount) {
        DP.assign(coins.size(), vector<int> (amount + 1, -1));
        this -> coins = coins;
        
        int answer = calc_coins(coins.size() - 1, amount);
        return answer == INT_MAX - 1 ? -1 : answer;
    }
    
    int calc_coins(int i, int amount) {
        if(amount == 0) return 0;
        if(amount < 0 || i < 0) return INT_MAX - 1;
        if(DP[i][amount] != -1) return DP[i][amount];
        
        if(coins[i] > amount)
            return DP[i][amount] = calc_coins(i - 1, amount);
            
        else
            return DP[i][amount] = min(calc_coins(i, amount - coins[i]) + 1, calc_coins(i - 1, amount));
    }
};


//Bottom Up Soln:

class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        int DP[coins.size() + 1][amount + 1];
        
        for(int i = 0; i < coins.size() + 1; i++)
            for(int j = 0; j < amount + 1; j++) 
                if(!i) DP[i][j] = INT_MAX - 1;
                else if(!j) DP[i][j] = 0;
        
        for(int i = 1; i < coins.size() + 1; i++)
            for(int j = 1; j < amount + 1; j++) {
                if(coins[i - 1] <= j) DP[i][j] = min(1 + DP[i][j - coins[i - 1]], DP[i - 1][j]);
                else DP[i][j] = DP[i - 1][j];
            } 
        
        return DP[coins.size()][amount] == INT_MAX - 1 ? -1 : DP[coins.size()][amount];
    }
};


//Bottom Up Soln: Better Space Complexity

class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        int DP[amount + 1];
        
        DP[0] = 0;
        sort(coins.begin(), coins.end());
        for(int i = 1; i < amount + 1; i++) {
            DP[i] = INT_MAX;
            
            for(auto c: coins) {
                if (i - c < 0) break;
                if(DP[i - c] != INT_MAX) DP[i] = min(DP[i], 1 + DP[i - c]);
            }
        } 
        
        return DP[amount] == INT_MAX ? -1 : DP[amount];
    }
};

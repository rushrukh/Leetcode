//Top Down Soln:

class Solution {
public:
    int DP[10001][13];
    int coinChange(vector<int>& coins, int amount) {
        memset(DP, -1, sizeof(DP));
        int result = helper(coins, amount, coins.size());
        return result == INT_MAX - 1? -1 : result;
    }
    
    int helper(vector<int>& coins, int amount, int idx) {
        if(!amount || !idx) return !amount ? 0 : INT_MAX - 1;
        if(DP[amount][idx] != -1) return DP[amount][idx];
        
        if(coins[idx - 1] <= amount) return DP[amount][idx] = min(1 + helper(coins, amount - coins[idx - 1], idx), helper(coins, amount, idx - 1));
        else return DP[amount][idx] = helper(coins, amount, idx - 1);
    }
};


//Bottom Up Soln:

class Solution {
public:
    int coinChange(vector<int>& coins, int amount) {
        int DP[coins.size() + 1][amount + 1];
        
        for(int i = 0; i < coins.size() + 1; i++)
            for(int j = 0; j < amount + 1; j++) 
                if(!i) DP[i][j] = INT_MAX - 1;
                else if(!j) DP[i][j] = 0;
        
        for(int i = 1; i < coins.size() + 1; i++)
            for(int j = 1; j < amount + 1; j++) {
                if(coins[i - 1] <= j) DP[i][j] = min(1 + DP[i][j - coins[i - 1]], DP[i - 1][j]);
                else DP[i][j] = DP[i - 1][j];
            } 
        
        return DP[coins.size()][amount] == INT_MAX - 1 ? -1 : DP[coins.size()][amount];
    }
};

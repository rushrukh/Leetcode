//Recursive Soln (Does not pass all the test cases, needs Memoization):

class Solution {
public:
    int DP[13][10001];
    int coinChange(vector<int>& coins, int amount) {
        memset(DP, -1, sizeof(DP));
        int min = knapSack(coins, amount, coins.size(), 0);         
        return min == INT_MAX ? -1 : min;
    }
    
    int knapSack(vector<int>& coins, int amount, int n, int curr) {
        if(!amount) {return curr;}
        if(!n) return INT_MAX;
        
        if(coins[n - 1] > amount) return knapSack(coins, amount, n - 1, curr);
        else return min(knapSack(coins, amount - coins[n - 1], n, curr + 1), knapSack(coins, amount, n - 1, curr));
    }
};

// TC O(n^2), SC O(N) - for sorting

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> result;
        sort(nums.begin(), nums.end());
        
        for(int i = 0; i < nums.size() && nums[i] <= 0; i++) {
            if(i == 0 || nums[i] != nums[i - 1]) {
                int low = i + 1, hi = n - 1;
                
                while(low < hi) {
                    if(nums[i] + nums[low] + nums[hi] > 0) {
                        hi--;
                    }
                    else if (nums[i] + nums[low] + nums[hi] < 0) {
                        low++;
                    }
                    else {
                        result.push_back({nums[i], nums[low], nums[hi]});
                        low++, hi--;
                        
                        while(low < n && nums[low] == nums[low - 1]) {
                            low++;
                        }
                    }
                }
            }
        }
        
        return result;
    }
};

// Basic implementation is: use two pointer approach to find a pair to make a triplet with the first value nums[i]
// But edge cases are pain in the ass:
// 1. Must avoid duplicate values:
//      - In case of i, duplicate values appear
//      - In case of left/right, duplicate values appear (taking care of one of left/right gets rid of the other one)
// 2. To use two pointers and move pointers based on total sum found, we need the array to be sorted.
// 3. Since the target is to get 0, if nums[i] itself is > 0, can we ever get a 0 sum in a sorted array? hehe


// TC O(n^2), SC O(n)

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        vector<vector<int>> result;
        int n = nums.size();
        
        unordered_map<int, int> hash;
        
        for(int i = 0; i < n; i++)
            hash[nums[i]] = i;
        
        for(int i = 0; i < n - 2 && nums[i] <= 0; i++) {
            int j = i + 1;
            
            if(i == 0 || nums[i] != nums[i - 1]) {
                while(j < n - 1) {
                    int target = -nums[i] - nums[j];
                    if(hash.find(target) != hash.end() && hash[target] > j) {
                        result.push_back({nums[i], nums[j], target});
                    }
                    j++;
                    while(j < n - 1 && nums[j] == nums[j - 1])
                        j++;
                }
            }
        }
        
        return result;
    }
};

// Brute Fource TC O(N), SC O(N^2)

class TicTacToe {
public:
    vector<vector<int>> board;
    int n = 0;
    
    TicTacToe(int n) {
        board.assign(n, vector<int> (n, 0));
        this -> n = n;
    }
    
    int move(int row, int col, int player) {
        board[row][col] = player;
        if(check_row(row, player))
            return player;
        else if(check_col(col, player))
            return player;
        else if(row == col && check_diagonal(player))
            return player;
        else if(row + col == this -> n - 1 && check_antidiagonal(player))
            return player;
        else
            return 0;
    }
    
    bool check_row(int row, int player) {
        for(int col = 0; col < n; col++) {
            if(board[row][col] != player)
                return false;
        }
        
        return true;
    }
    
    bool check_col(int col, int player) {
        for(int row = 0; row < n; row++) {
            if(board[row][col] != player)
                return false;
        }
        
        return true;
    }
    
    bool check_diagonal(int player) {
        for(int i = 0; i < n; i++) {
            if(board[i][i] != player)
                return false;
        }
        
        return true;
    }
    
    bool check_antidiagonal(int player) {
        for(int row = 0; row < n; row++) {
                if(board[row][this -> n - 1 - row] != player)
                    return false;
        }
        
        return true;
    }
};

/**
 * Your TicTacToe object will be instantiated and called as such:
 * TicTacToe* obj = new TicTacToe(n);
 * int param_1 = obj->move(row,col,player);
 */
 
 
 // Optimized, TC O(1), SC O(N)
 
 class TicTacToe {
public:
    vector<int> row_1, col_1, row_2, col_2;
    int diagonal_1 = 0, diagonal_2 = 0, anti_diagonal_1 = 0, anti_diagonal_2 = 0;
    int n = 0;
    
    TicTacToe(int n) {
        row_1.assign(n, 0), row_2.assign(n, 0), col_1.assign(n, 0), col_2.assign(n, 0);
        this -> n = n;
    }
    
    int move(int row, int col, int player) {
        if(player == 1) {
            row_1[row]++;
            col_1[col]++;
            
            if(row == col)
                diagonal_1++;
            if(row + col == this -> n - 1)
                anti_diagonal_1++;
            
            if(row_1[row] == n || col_1[col] == n || diagonal_1 == n || anti_diagonal_1 == n)
                return player;
        }
        else {
            row_2[row]++;
            col_2[col]++;
            
            if(row == col)
                diagonal_2++;
            if(row + col == this -> n - 1)
                anti_diagonal_2++;
            
            if(row_2[row] == n || col_2[col] == n || diagonal_2 == n || anti_diagonal_2 == n)
                return player;
        }
        
        return 0;
    }
};

/**
 * Your TicTacToe object will be instantiated and called as such:
 * TicTacToe* obj = new TicTacToe(n);
 * int param_1 = obj->move(row,col,player);
 */


// More space optimization:

class TicTacToe {
public:
    vector<int> row_, col_;
    int diagonal = 0, anti_diagonal = 0;
    int n = 0;
    
    TicTacToe(int n) {
        row_.assign(n, 0), col_.assign(n, 0);
        this -> n = n;
    }
    
    int move(int row, int col, int player) {
        row_[row] = player == 1 ? row_[row] + 1 : row_[row] - 1;
        col_[col] = player == 1 ? col_[col] + 1 : col_[col] - 1;
        
        if(row == col)
            diagonal = player == 1 ? diagonal + 1 : diagonal - 1;
        if(row + col == this -> n - 1)
            anti_diagonal = player == 1? anti_diagonal + 1 : anti_diagonal - 1;
        
        if(abs(row_[row]) == n)
            return row_[row] > 0 ? 1 : 2;
        
        if(abs(col_[col]) == n)
            return col_[col] > 0 ? 1 : 2;
        
        if(abs(diagonal) == n)
            return diagonal > 0 ? 1 : 2;
        
        if(abs(anti_diagonal) == n)
            return anti_diagonal > 0 ? 1 : 2;
        
        return 0;
    }
};

/**
 * Your TicTacToe object will be instantiated and called as such:
 * TicTacToe* obj = new TicTacToe(n);
 * int param_1 = obj->move(row,col,player);
 */

// TC O(E + V + VlogV), SC O(V)

// TC O(E + V + VlogV), SC O(V)

class Solution {
public:
    int n = 0;
    vector<int> parent, rank;
    string smallestStringWithSwaps(string s, vector<vector<int>>& pairs) {
        this -> n = s.size();
        init_dsu();
        
        for(auto &pair: pairs) {
            Union(pair[0], pair[1]);
        }
        
        vector<vector<int>> hash(n);
        
        for(int i = 0; i < n; i++) {
            hash[find_parent(i)].push_back(i);
        }
        
        for(auto &indices: hash) {
            string tmp_s = "";
            for(int i = 0; i < indices.size(); i++) {
                tmp_s += s[indices[i]];
            }
            
            sort(tmp_s.begin(), tmp_s.end());
            
            int curr_char = 0;
            for(int i = 0; i < indices.size(); i++) {
                s[indices[i]] = tmp_s[curr_char++];
            }
        }
        
        return s;
    }
    
    void Union(int u, int v) {
        int parent_u = find_parent(u), parent_v = find_parent(v);
        if(parent_u == parent_v) return;
        
        if(rank[parent_u] < rank[parent_v])
            swap(parent_u, parent_v);
        
        parent[parent_v] = parent_u;
        rank[parent_u] += rank[parent_v];
        rank[parent_v] = 0;
    }
    
    int find_parent(int x) {
        if(parent[x] == x) return x;
        return parent[x] = find_parent(parent[x]);
    }
    
    void init_dsu() {
        for(int i = 0; i < n; i++) {
            parent.push_back(i);
            rank.push_back(1);
        }
    }
};

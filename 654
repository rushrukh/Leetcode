/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* constructMaximumBinaryTree(vector<int>& nums) {
        
        TreeNode* root = formTheTree(nums, 0, nums.size() - 1);
        
        return root;
    }
    
    TreeNode* formTheTree(vector<int> nums, int left, int right) {
        if(left > right) return NULL;
        
        int maxIndex = returnMaxIndex(nums, left, right);
        TreeNode* root = new TreeNode(nums[maxIndex]);
        
        root -> left = formTheTree(nums, left, maxIndex -1);
        root -> right = formTheTree(nums, maxIndex + 1, right);
        
        return root;
    }
    
    int returnMaxIndex(vector<int> nums, int left, int right) {
        
        int maxIndex = 0, maxNum = INT_MIN;
        
        for(int i = left; i <= right; i++) {
            if(nums[i] > maxNum) {
                maxNum = nums[i];
                maxIndex = i;
            }
        }
        
        return maxIndex;
    }
};

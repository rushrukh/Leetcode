// Soln: Checks each element with + and - sign

class Solution {
public:
    map<pair<int, int>, int> m;
    int findTargetSumWays(vector<int>& nums, int target) {
        return countWays(nums, 0, 0, target);
    }
    
    int countWays(vector<int>& nums, int index, int total, int target) {
        if(m.find({index, total}) != m.end()) return m[{index, total}];
        if(index == nums.size() && total == target) return 1;
        if(index == nums.size() && total != target) return 0;
        
        m[{index, total}] = countWays(nums, index + 1, total + nums[index], target) + countWays(nums, index + 1, total - nums[index], target);
        
        return m[{index, total}];
    }
};


// Soln: Reducing Target Sum problem to Subset Sum

class Solution {
public:
    int DP[21][1001];
    int findTargetSumWays(vector<int>& nums, int target) {
        int totalSum = 0;
        for(auto& x: nums) totalSum += x;
        if((totalSum + target) % 2 == 1) return 0;
        
        memset(DP, -1, sizeof(DP));
        return helper(nums, (totalSum + target) / 2, 0, 0);
    }
    int helper(vector<int>& nums, int target, int idx, int currentSum) {
        if(currentSum == target && idx == nums.size()) return 1;
        if(idx == nums.size()) return 0;
        if(DP[idx][currentSum] != -1) return DP[idx][currentSum];
        
        return DP[idx][currentSum] = helper(nums, target, idx + 1, currentSum + nums[idx]) + helper(nums, target, idx + 1, currentSum); 
    }
};

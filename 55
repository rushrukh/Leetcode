// Top-down DP: TC O(N^2), SC O(N)

class Solution {
public:
    int n = 0;
    vector<int> nums;
    vector<int> DP;
    bool canJump(vector<int>& nums) {
        this -> n = nums.size(), this -> nums = nums;
        DP.assign(n, -1);
        return go_right(0);
    }
    
    bool go_right(int x) {
        if(x >= n - 1) return true;
        if(DP[x] != -1) return DP[x];
        
        int next = nums[x];
        
        for(int i = 1; i <= next; i++) {
            if(go_right(x + i)) return DP[x] = true;
        }
        
        
        return DP[x] = false;
    }
};

// Greedy: TC O(N), SC O(1)

class Solution {
public:
    bool canJump(vector<int>& nums) {
        int n = nums.size();
        int leftmost_idx = n - 1;
        
        for(int i = n - 1; i >= 0; i--) {
            if(i == n - 1 || i + nums[i] >= n - 1) {
                leftmost_idx = min(leftmost_idx, i);
                continue;
            }
            
            int left = i, right = nums[i] + i;
            if(leftmost_idx <= right)
                leftmost_idx = min(leftmost_idx, left);
        }
        
        return leftmost_idx == 0;
    }
};

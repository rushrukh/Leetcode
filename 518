//Recursion + Memoization:

class Solution {
public:
    int DP[5001][301] = {0};
    int change(int amount, vector<int>& coins) {
        memset(DP, -1, sizeof(DP));
        return knapSack(coins, amount, coins.size());
    }
    int knapSack(vector<int>& coins, int amount, int n) {
        if(!amount || !n) return amount == 0 ? 1 : 0;
        
        if(DP[amount][n] != -1)
            return DP[amount][n];
        
        if(coins[n - 1] <= amount)
            return DP[amount][n] = knapSack(coins, amount - coins[n - 1], n) + knapSack(coins, amount, n - 1);
        
        if(coins[n - 1] > amount)
            return DP[amount][n] = knapSack(coins, amount, n - 1);
        
        return 0;
    }
};

//Top Down:

class Solution {
public:
    int DP[301][5001];
    int change(int amount, vector<int>& coins) {
        int n = coins.size();
        for(int i = 0; i <= n; i++)
            for(int j = 0; j <= amount; j++) {
                if(i == 0) DP[i][j] = 0;
                if(j == 0) DP[i][j] = 1;
            }
        
        for(int i = 1; i <= n; i++) 
            for(int j = 1; j <= amount; j++) {
                if(coins[i - 1] > j) DP[i][j] = DP[i - 1][j];
                else DP[i][j] = DP[i - 1][j] + DP[i][j - coins[i - 1]];
            }
        
        return DP[n][amount];
    }
};

// TC O(N), SC O(N)

class Solution {
public:
    int m = 0, n = 0;
    int shortestPathBinaryMatrix(vector<vector<int>>& grid) {
        this -> m = grid.size(), this -> n = grid[0].size();
        if(grid[0][0] || grid[m - 1][n - 1]) return -1;

        vector<pair<int, int>> dir = {{-1, -1}, {-1, 0}, {-1, 1}, {0, -1}, {0, 1}, {1, -1}, {1, 0}, {1, 1}};
        
        queue<pair<int, int>> Q;
        Q.push({0, 0});
        
        int level = 0;
        while(!Q.empty()) {
            int l = Q.size();
            
            for(int i = 0; i < l; i++) {
                int r = Q.front().first, c = Q.front().second;
                Q.pop();
                grid[r][c] = -1;
                
                if(r == m - 1 && c == n - 1)
                    return level + 1;
                
                for(auto &d: dir) {
                    int new_r = r + d.first, new_c = c + d.second;
                    
                    if(valid_index(new_r, new_c) && grid[new_r][new_c] == 0) {
                        grid[new_r][new_c] = -1;
                        Q.push({new_r, new_c});
                    }
                        
                }
            }
            
            level++;
        }
        
        return -1;
    }
    
    bool valid_index(int i, int j) {
        return i >= 0 && j >= 0 && i < m && j < n;
    }
};

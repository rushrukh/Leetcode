// TC O(N), SC O(1) : Floyd's Cycle Detection
// If there is a cycle, we find it when slow == fast.
// Now, from head and slow, if we move one step at a time, they meet at the beginning of the loop.

class Solution {
public:
    ListNode *detectCycle(ListNode *head) {
        ListNode *intersect = helper(head);
        if(!intersect)
            return NULL;
        
        while(head != intersect) {
            head = head -> next;
            intersect = intersect -> next;
        }
        
        return intersect;
    }
    
    ListNode *helper(ListNode *head) {
        ListNode *slow = head, *fast = head;
        
        while(fast) {
            slow = slow -> next;
            if(!fast -> next)
                break;
            fast = fast -> next -> next;
            if(fast == slow)
                return slow;
        }
        
        return NULL;
    }
};

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    bool isPalindrome(ListNode* head) {
        int count = 0, half_count = 0;
        ListNode *first_node = head, *second_head = NULL, *prev = NULL;
        
        while(first_node) {
            count++;
            first_node = first_node -> next;
        }
        
        if(count == 1)
            return true;
        
        first_node = head;
        
        while(half_count < (count / 2)) {
            half_count++;
            prev = first_node;
            first_node = first_node -> next;
        }

        if(count % 2 == 0) {
            prev -> next = NULL;
            second_head = reverseLL(first_node);
            cout << second_head -> val << endl;
        }
        else {
            ListNode *new_node = new ListNode(first_node -> val);
            prev -> next = new_node;
            second_head = reverseLL(first_node);
        }
        
        while(head) {
            if(head -> val != second_head -> val)
                return false;
            head = head -> next;
            second_head = second_head -> next;
        }
        
        return true;
    }
    
    ListNode* reverseLL(ListNode* head) {
        ListNode *prev = NULL, *curr_head = head, *next_node = NULL;
        
        while(curr_head) {
            next_node = curr_head -> next;
            curr_head -> next = prev;
            
            prev = curr_head;
            curr_head = next_node;
        }
        
        return prev;
    }
};

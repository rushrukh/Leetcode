/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int sum = 0;
    int sumRootToLeaf(TreeNode* root) {
        string soFar;
        DFS(root, soFar);
        return sum;
    }
    void DFS(TreeNode* root, string& soFar) {
        if(!root) return;
        
        soFar += to_string(root -> val);
        
        DFS(root -> left, soFar);
        DFS(root -> right, soFar);
        
        if(!root -> left && !root -> right) makeDecimal(soFar);
        soFar.pop_back();
    }
    void makeDecimal(string binary) {
        int tmp = 0;
        
        for(int i = binary.length() - 1, j = 0; i >= 0; i--) 
            tmp += (binary[i] - '0') * pow(2, j++);
        
        sum += tmp;
    }
};

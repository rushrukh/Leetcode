/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int sumRootToLeaf(TreeNode* root) {
        if(!root) return 0;
        
        int sum = 0;
        string s;
        
        DFS(root, s, sum);
        return sum;
    }
    
    void DFS(TreeNode* root, string s, int &sum) {
        if(!root) return;
        s += to_string(root -> val);
        
        if(!root -> left && !root -> right) {
            sum += calc(s);
            s.pop_back(); //this fucker took 2h of mine to figure out, ugh.
            return;
        }
        if(root -> left)
            DFS(root -> left, s, sum);
        if(root -> right)
            DFS(root -> right, s, sum);
        
        return;
    }
    
    int calc(string s) {
        int n = 0;
        reverse(s.begin(), s.end());
        
        for(int i = 0; i < s.size(); i++)
            n += pow(2, i) * (s[i] - '0');
        
        return n;
    }
};

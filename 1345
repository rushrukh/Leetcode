class Solution {
public:
    int minJumps(vector<int>& arr) {
        unordered_map<int, vector<int>> graph;
        
        for(int i = 0; i < arr.size(); i++) {
            if(graph.find(arr[i]) == graph.end()) graph[arr[i]] = {i};
            else graph[arr[i]].push_back(i);
        }
        
        queue<pair<int, int>> Q;
        vector<int> visited (arr.size(), 0);
        visited[0] = 1;
        Q.push({0, 0});
        
        while(!Q.empty()) {
            pair<int, int> tmp = Q.front();
            Q.pop();
            int node = tmp.first;
            int jumps = tmp.second;
            
            if(node == arr.size() - 1) return jumps;
            
            if(node < arr.size() - 1 && !visited[node + 1]) {
                visited[node + 1] = 1;
                Q.push({node + 1, jumps + 1});
            }
            if(node > 0 && !visited[node - 1]) {
                visited[node - 1] = 1;
                Q.push({node - 1, jumps + 1});
            }
            
            for(auto x: graph[arr[node]]) 
                if(!visited[x]) {
                    visited[x] = 1;
                    Q.push({x, jumps + 1});
                }
            
            graph[arr[node]] = {};
        }
        
        return 0;
    }
};

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 
// Soln using the first tree: TC O(m), SC if the tree is skewed O(m), else O(log m) 
class Solution {
public:
    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {
        if(!root1) return root2;
        preOrder(root1, root2);
        
        return root1;
    }
    void preOrder(TreeNode* root1, TreeNode* root2) {
        if(root1 && root2) {
            root1 -> val += root2 -> val;
            
            if(root1 -> left && root2 -> left) preOrder(root1 -> left, root2 -> left);
            else if(!root1 -> left && root2 -> left) root1 -> left = root2 -> left;
            
            if(root1 -> right && root2 -> right) preOrder(root1 -> right, root2 -> right);
            
            else if(!root1 -> right && root2 -> right) root1 -> right = root2 -> right;
        }
    }
};

// Soln using a new tree: TC O(m), SC if the tree is skewed O(m), else O(log m) 
class Solution {
public:
    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {
        if(!root1 || !root2) return root1 ? root1 : root2;
        
        TreeNode* newRoot = NULL;
        newRoot = preOrder(root1, root2, newRoot);
        
        return newRoot;
    }
    TreeNode* preOrder(TreeNode* root1, TreeNode* root2, TreeNode* newRoot) {
        if(root1 && root2) {
            newRoot = new TreeNode(root1 -> val + root2 -> val);
            
            if(root1 -> left && root2 -> left) newRoot -> left = preOrder(root1 -> left, root2 -> left, newRoot -> left);
            else if(!root1 -> left && root2 -> left) newRoot -> left = root2 -> left;
            else if(root1 -> left && !root2 -> left) newRoot -> left = root1 -> left;
            
            if(root1 -> right && root2 -> right) newRoot -> right = preOrder(root1 -> right, root2 -> right, newRoot -> right);
            else if(!root1 -> right && root2 -> right) newRoot -> right = root2 -> right;
            else if(root1 -> right && !root2 -> right) newRoot -> right = root1 -> right;
        }
        
        return newRoot;
    }
};


// Soln using Queue (BFS):
class Solution {
public:
    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {
        if(!root1 || !root2) return root1 ? root1 : root2;
        
        queue<TreeNode*> Q1; Q1.push(root1);
        queue<TreeNode*> Q2; Q2.push(root2);
        
        while(!Q1.empty()) {
            TreeNode* t1 = Q1.front(); Q1.pop();
            TreeNode* t2 = Q2.front(); Q2.pop();
            
            t1 -> val += t2 -> val;
            
            if(t1 -> left && t2 -> left) {
                Q1.push(t1 -> left);
                Q2.push(t2 -> left);
            }
            else if(!t1 -> left && t2 -> left) t1 -> left = t2 -> left;
            
            if(t1 -> right && t2 -> right) {
                Q1.push(t1 -> right);
                Q2.push(t2 -> right);
            }
            else if(!t1 -> right && t2 -> right) t1 -> right = t2 -> right;
        }
        
        return root1;
    }
};


// Soln using Stack (DFS):
class Solution {
public:
    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {
        if(!root1 || !root2) return root1 ? root1 : root2;
        
        stack<TreeNode*> s1; s1.push(root1);
        stack<TreeNode*> s2; s2.push(root2);
        
        while(!s1.empty()) {
            TreeNode* t1 = s1.top(); s1.pop();
            TreeNode* t2 = s2.top(); s2.pop();
            
            t1 -> val += t2 -> val;
            
            if(t1 -> left && t2 -> left) {
                s1.push(t1 -> left);
                s2.push(t2 -> left);
            }
            else if(!t1 -> left && t2 -> left) t1 -> left = t2 -> left;
            
            if(t1 -> right && t2 -> right) {
                s1.push(t1 -> right);
                s2.push(t2 -> right);
            }
            else if(!t1 -> right && t2 -> right) t1 -> right = t2 -> right;
        }
        
        return root1;
    }
};

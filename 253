// Sort + Min Heap: TC O(N logN), SC O(N)
class Solution {
public:
    int minMeetingRooms(vector<vector<int>>& intervals) {
        sort(intervals.begin(), intervals.end());
        priority_queue<int, vector<int>, greater<int>> Q;
        
        for(auto &interval: intervals) {
            if(Q.empty()) Q.push(interval[1]);
            else {
                int tmp = Q.top();
                if(interval[0] >= tmp) Q.pop();
                Q.push(interval[1]);
            }
        }
        return Q.size();
    }
};

// Sorting Soln: TC O(N logN) SC O (N)
class Solution {
public:
    int minMeetingRooms(vector<vector<int>>& intervals) {
        int count = 0, currStartTime = 0, currEndTime = 0;;
        vector<int> startTime;
        vector<int> endTime;
        for(auto &interval: intervals) {
            startTime.push_back(interval[0]);
            endTime.push_back(interval[1]);
        }
        
        sort(startTime.begin(), startTime.end());
        sort(endTime.begin(), endTime.end());
        
        for(int i = 0; i < startTime.size(); i++) {
            if(startTime[currStartTime] >= endTime[currEndTime]) {
                ++currStartTime, ++currEndTime;
                continue;
            }
            count++;
            ++currStartTime;
        }
        
        return count;
    }
};

// TC O(N), SC O(1)

class Solution {
public:
    Node* lowestCommonAncestor(Node* p, Node * q) {
        bool isPparent = isParent(p, q);
        if(isPparent) return p;
        
        bool isQparent = isParent(q, p);
        if(isQparent) return q;
        
        while(p) {
            p = p -> parent;
            bool isPparent = isParent(p, q);
            if(isPparent) return p;
        }
        
        return NULL;
    }
    bool isParent(Node* parent, Node* child) {
        if(!parent) return false;
        
        if(parent == child) return true;
        return isParent(parent -> left, child) || isParent(parent -> right, child);
    }
};

// TC O(N), SC O(1)

class Solution {
public:
    Node* lowestCommonAncestor(Node* p, Node * q) {
        Node *a = p, *b = q;
        while(a != b) {
            a = a == NULL ? q : a -> parent;
            b = b == NULL ? p : b -> parent;
        }
        return a;
    }
    
};

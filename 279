//Top Down Soln:

class Solution {
public:
    int numSquaresHelper(int n, vector<int>& DP) {
        if(!n) return 0;
        if(DP[n] != -1) return DP[n];
        
        int mn = INT_MAX;
        for(int i = 1; i*i <= n; i++) {
            int count = 1 + numSquaresHelper(n - i*i, DP);
            mn = min(mn, count);
            DP[n] = mn;
        }
        return mn;
    }
    int numSquares(int n) {
        vector<int> DP(n + 1, -1);
        
        return numSquaresHelper(n, DP);
    }
};

//Bottom Up Soln: Time Complexity - O(n * sqrt(n))

class Solution {
public:
    int numSquares(int n) {
        vector<int> DP(n + 1, INT_MAX);
        DP[0] = 0;
        
        for(int i = 1; i <= n; i++) 
            for(int j = 1; j*j <= i; j++) 
                DP[i] = min(DP[i], DP[i - j*j] + 1);
        
        return DP[n];
    }
};

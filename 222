/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int countNodes(TreeNode* root) {
        int height = find_height(root);
        int left = 1, right = pow(2, height) - 1;
        
        while(left <= right) {
            int mid = left + (right - left) / 2;
            if(exists(mid, height, root))
                left = mid + 1;
            else right = mid - 1;
        }
        
        return pow(2, height) - 1 + left;
    }
    
    int find_height(TreeNode* root) {
        if(!root) return -1;
        return 1 + find_height(root -> left);
    }
    
    bool exists(int pivot, int height, TreeNode *root) {
        int left = 0, right = pow(2, height) - 1;
        
        for(int i = 0; i < height; i++) {
            int mid = left + (right - left) / 2;
            if(mid >= pivot) {
                root = root -> left;
                right = mid;
            }
            else {
                root = root -> right;
                left = mid + 1;
            }
        }
        
        return root != NULL;
    }
};

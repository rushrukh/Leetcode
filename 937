// TC O(M * NlogN), SC O(M * log N) where M = maximum size of one log, N = number of logs

class Solution {
public:
    static bool compare(string A, string B) {
        int space_1 = A.find(" ");
        string id_1 = A.substr(0, space_1);
        string rest_1 = A.substr(space_1 + 1, A.size());
        
        int space_2 = B.find(" ");
        string id_2 = B.substr(0, space_2);
        string rest_2 = B.substr(space_2 + 1, B.size());
        
        if(!isdigit(rest_1[0]) && isdigit(rest_2[0]))
            return true;
        else if(!isdigit(rest_1[0]) && !isdigit(rest_2[0])) {
            if(rest_1.compare(rest_2) == 0)
                return id_1 < id_2;
            else
                return rest_1 < rest_2;
        }
        
        return false;
    }
    vector<string> reorderLogFiles(vector<string>& logs) {
        stable_sort(logs.begin(), logs.end(), compare);
        return logs;
    }
    
};

// TC O(M * NlogN), SC O(M * log N) where M = maximum size of one log, N = number of logs

class Solution {
public:
    static bool compare(string log_1, string log_2) {
        int first_space = log_1.find(' ');
        string id_1 = log_1.substr(0, first_space);
        string rest_1 = log_1.substr(first_space + 1, log_1.size());
        
        int second_space = log_2.find(' ');
        string id_2 = log_2.substr(0, second_space);
        string rest_2 = log_2.substr(second_space + 1, log_2.size());
        
        if(!isdigit(rest_1[0]) && isdigit(rest_2[0]))
            return true;
        
        else if(isdigit(rest_1[0]) && !isdigit(rest_2[0]))
            return false;
        
        else if(!isdigit(rest_1[0]) && !isdigit(rest_2[0])) {
            if(rest_2.compare(rest_1) == 0)
                return id_1 < id_2;
            else 
                return rest_1 < rest_2;
        }
        
        return false;
    }
    
    vector<string> reorderLogFiles(vector<string>& logs) {
        stable_sort(logs.begin(), logs.end(), compare);
        return logs;
    }
};

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* lcaDeepestLeaves(TreeNode* root) {
        
        return DFS(root).first;
    }
    pair<TreeNode*, int> DFS(TreeNode* root) {
        if(!root)
            return {root, 0};
        
        auto left = DFS(root -> left);
        auto right = DFS(root -> right);
        
        if(left.second == right.second)
            return {root, left.second + 1};
        
        if(left.second > right.second)
            return {left.first, left.second + 1};
        
        return {right.first, right.second + 1};

    }
};

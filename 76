// TC O(M * N), SC O(M + N)

class Solution {
public:
    string minWindow(string s, string t) {
        if(s.size() < t.size()) return "";
        unordered_map<char, int> t_map, s_map;
        int left = 0, min_length = INT_MAX, min_left = INT_MAX, min_right = INT_MAX;
        string min_string = "";
        
        for (int i = 0; i < t.size(); i++) {
            t_map[t[i]]++;
        }
            
        for (int right = 0; right < s.length(); right++) {
            s_map[s[right]]++;
            
            while (matches(s_map, t_map)) {
                if (right - left + 1 < min_length) {
                    min_length = right - left + 1;
                    min_left = left;
                    min_right = right;
                }
                
                s_map[s[left]]--;
                left++;
            }
        }
        
        return min_right == INT_MAX ? "" : s.substr(min_left, min_right - min_left + 1);
    }
    bool matches(unordered_map<char, int>& s_map, unordered_map<char, int>& t_map) {
        for(auto &pair: t_map)
            if(s_map.find(pair.first) == s_map.end() || s_map[pair.first] < pair.second)
                return false;
        return true;
    }
};


// TC O(S + T), SC O(T)

class Solution {
public:
    string minWindow(string s, string t) {
        int s_length = s.size(), t_length = t.size(), left = 0, min_left = INT_MAX, min_length = INT_MAX, count = 0;
        unordered_map<char, int> hash;
        
        for(char &c: t)
            hash[c]++;
        
        for(int right = 0; right < s_length; right++) {
            if(hash.find(s[right]) != hash.end()) {
                hash[s[right]]--;
                if(hash[s[right]] > -1)
                    count++;
                
                while(count == t_length && left <= right) {
                    if(right - left + 1 < min_length) {
                        min_length = right - left + 1;
                        min_left = left;
                    }
                    
                    if(hash.find(s[left]) != hash.end()) {
                        hash[s[left]]++;
                        if(hash[s[left]] > 0)
                            count--;
                    }
                    
                    left++;
                }
            }
        }
        
        return min_length == INT_MAX ? "" : s.substr(min_left, min_length);
    }
};

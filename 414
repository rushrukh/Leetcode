// Quickselect: TC O(N), SC O(N)

class Solution {
public:
    vector<int> distinct;
    int thirdMax(vector<int>& nums) {
        unordered_set<int> nums_set(nums.begin(), nums.end());
        distinct.assign(nums_set.begin(), nums_set.end());
        if(distinct.size() < 3) return *max_element(distinct.begin(), distinct.end());
        int n = nums_set.size(), k = n - 3;
        
        while(true) {
            int left = 0, right = distinct.size() - 1;
            int pivot_index = find_pivot(left, right);
            
            if(pivot_index < k)
                left = pivot_index + 1;
            else if(pivot_index > k)
                right = pivot_index - 1;
            else
                break;
        }
        
        return distinct[k];
    }
    
    int find_pivot(int left, int right) {
        int pivot_index = left + rand() % (right - left + 1);
        swap(distinct[pivot_index], distinct[right]);
        int p = left;
        
        for(int i = left; i < right; i++) {
            if(distinct[i] <= distinct[right]) {
                swap(distinct[p++], distinct[i]);
            }
        }
        
        swap(distinct[right], distinct[p]);
        
        return p;
    }
};

// TC O(N), SC O(N)

class Solution {
public:
    int reachableNodes(int n, vector<vector<int>>& edges, vector<int>& restricted) {
        unordered_set<int> seen;
        for(int &r: restricted) seen.insert(r);
        
        unordered_map<int, vector<int>> graph;
        for(auto &edge: edges) {
            graph[edge[0]].push_back(edge[1]);
            graph[edge[1]].push_back(edge[0]);
        }
        
        queue<int> Q;
        Q.push(0);
        seen.insert(0);
        int count = 0;
        
        while(!Q.empty()) {
            int curr_node = Q.front(); Q.pop();
            count++;
            
            for(int &next: graph[curr_node]) {
                if(seen.find(next) == seen.end()) {
                    seen.insert(next);
                    Q.push(next);
                }
            }
        }
        
        return count;
    }
};

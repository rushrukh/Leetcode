//TC O(m*n), SC O(m*n)

class Solution {
public:
    int DP[101][101];
    int uniquePaths(int m, int n) {
        memset(DP, -1, sizeof(DP));
        return helper(m, n, 0, 0);
    }
    int helper(int m, int n, int i, int j) {
        if(i >= m || j >= n) return 0;
        if(i == m - 1 && j == n - 1) return 1;
        if(DP[i][j] != -1) return DP[i][j];
        
        return DP[i][j] = helper(m, n, i, j + 1) + helper(m, n, i + 1, j); 
    }
};


class Solution {
public:
    int DP[101][101];
    int uniquePaths(int m, int n) {
        memset(DP, -1, sizeof(DP));
        return checkPaths(m, n);
    }
    int checkPaths(int m, int n) {
        if(m == 1 || n == 1) return 1;
        if(DP[m][n] != -1) return DP[m][n];
        
        return DP[m][n] = checkPaths(m - 1, n) + checkPaths(m, n - 1); 
    }
};


//TC: O(m*n), SC: O(n)
class Solution {
public:
    int uniquePaths(int m, int n) {
        vector<int> DP(n, 1);
        
        for(int i = 1; i < m; i++)
            for(int j = 1; j < n; j++)
                DP[j] = DP[j] + DP[j - 1];
        
        return DP[n - 1];
    }
};

// TC O(V), SC O(V)

class Solution {
public:
    vector<int> findMinHeightTrees(int n, vector<vector<int>>& edges) {
        vector<unordered_set<int>> adjList(n);
        
        for(auto& edge: edges) {
            adjList[edge[0]].insert(edge[1]);
            adjList[edge[1]].insert(edge[0]);
        }
        
        queue<int> Q;
        for(int i = 0; i < adjList.size(); i++) 
            if(adjList[i].size() <= 1) Q.push(i);
        
        
        int remainingNodes = n;
        while(remainingNodes > 2) {
            int nQ = Q.size();
            remainingNodes -= nQ;
            
            for(int i = 0; i < nQ; i++) {
                int fromNode = Q.front();
                Q.pop();
                
                int toNode = *adjList[fromNode].begin();
                adjList[toNode].erase(fromNode);

                if(adjList[toNode].size() == 1) Q.push(toNode);
                adjList[fromNode].clear();
            }
        }
        
        vector<int> result;
        while(!Q.empty()) {
            int tmp = Q.front(); Q.pop();
            result.push_back(tmp);
        }

        return result;
    }
};

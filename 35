class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        return searchBinary(nums, target, 0, nums.size() -1);
    }
    
    int searchBinary(vector<int>& nums, int target, int left, int right) {
        if(left <= right) {
            int mid = (left + right) / 2;

            if(target > nums[right]) return right + 1;
            if(target < nums[left]) return left;
            if(target == nums[mid] || (target < nums[mid] && target > nums[mid - 1])) return mid;
            else if(target < nums[mid]) return searchBinary(nums, target, left, mid);
            else return searchBinary(nums, target, mid + 1, right);
        }
        return -1;
    }
};

// TC O(log N), SC O(1)
class Solution {
public:
    int searchInsert(vector<int>& nums, int target) {
        int left = 0, right = nums.size() - 1;
        
        while(left <= right) {
            int mid = left + (right - left) / 2;
            
            if(nums[mid] == target)
                return mid;
            else if(nums[mid] < target)
                left = mid + 1;
            else
                right = mid - 1;
        }
        
        return left;
    }
};

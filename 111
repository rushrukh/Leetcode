/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int minDepth(TreeNode* root) {
        if(!root)
            return 0;
        
        int depth = 0;      
        queue<TreeNode*> Q;
        Q.push(root);
        
        while(!Q.empty()) {
            int currentQueueSize = Q.size();
            depth++;
            
            for(int i = 0; i < currentQueueSize; i++) {
                TreeNode* currNode = Q.front();
                Q.pop();
                
                if(!currNode -> left && !currNode -> right)
                    return depth;
                if(currNode -> left)
                    Q.push(currNode -> left);
                if(currNode -> right)
                    Q.push(currNode -> right);
            }
        }
        return depth;
    }
};


// TC O(N), SC O(N)

class Solution {
public:
    int min_depth = INT_MAX;
    int minDepth(TreeNode* root, int depth = 1) {
        if(!root) return 0;
        
        minDepth(root -> left, depth + 1);
        minDepth(root -> right, depth + 1);
        
        if(!root -> left && !root -> right && depth < min_depth)
            min_depth = depth;
        
        return min_depth;
    }
};

// Max Heap Soln: TC O(N logN), SC O(N)

class Solution {
public:
    string reorganizeString(string s) {
        unordered_map<char, int> hash;
        int max_length = 0;
        
        for(char &x: s) {
            hash[x]++;
            max_length = max(max_length, hash[x]);
        }
        
        if(max_length > ceil(s.size() / 2.0)) return "";
           
        auto comp = [&hash](char A, char B) { return hash[A] < hash[B];};
        priority_queue<char, vector<char>, decltype(comp)> Q(comp);
        
        for(auto &x: hash) Q.push(x.first);
        
        string result;
        
        while(Q.size() > 1) {
            char tmpFirst = Q.top(); Q.pop();
            char tmpSecond = Q.top(); Q.pop();

            if(!result.size()) {
                result += tmpFirst;
                result += tmpSecond;
            }
            else {
                if(result[result.size() - 1] == tmpFirst) {
                    result += tmpSecond;
                    result += tmpFirst;
                }
                else {
                    result += tmpFirst;
                    result += tmpSecond;
                }
            }
            
            if(--hash[tmpFirst] > 0) Q.push(tmpFirst);
            if(--hash[tmpSecond] > 0) Q.push(tmpSecond);
        }
        
        if(Q.size()) result += Q.top();
        
        return result;
    }
};


// TC O(N), SC O(N)

class Solution {
public:
    string reorganizeString(string s) {
        int n = s.size(), max_s = 0;
        
        unordered_map<char, int> hash;
        
        for(char &c: s) {
            hash[c]++;
            max_s = max(max_s, hash[c]);
        }
        
        if(max_s > ceil(s.size() / 2.0)) return "";
        
        string result = "";
        
        char last;
        while(result.size() != s.size()) {
            char new_ch = find_frequent(hash, last);
            result += new_ch;
            last = new_ch;
            hash[last]--;
        }
                
        return result;
    }
    
    char find_frequent(unordered_map<char, int> &hash, char last) {
        int max_c = 0;
        char max_ch;
        
        for(auto &h: hash) {
            if(h.second > max_c && h.first != last && h.second) {
                max_c = h.second;
                max_ch = h.first;
            }
        }
        
        return max_ch;
    }
};

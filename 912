// 1. STL sort, TC O(NlogN)

class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        sort(nums.begin(), nums.end());
        return nums;
    }
};

// 2. STL stable sort, TC O(NlogN)

class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        stable_sort(nums.begin(), nums.end());
        return nums;
    }
};

// 3. Mergesort: TC O(NlogN), SC O(N)

class Solution {
public:
    vector<int> sortArray(vector<int>& nums) {
        int n = nums.size();
        mergesort(nums, 0, n - 1);
        
        return nums;
    }
    
    void mergesort(vector<int> &nums, int left, int right) {
        if(left == right)
            return;
        
        int mid = left + (right - left) / 2;
        mergesort(nums, left, mid);
        mergesort(nums, mid + 1, right);
        
        merge(nums, left, mid, right);
    }
    
    void merge(vector<int> &nums, int left, int mid, int right) {
        if(left == right)
            return;
        
        vector<int> tmp (right - left + 1, 0);
        int i = left, j = mid + 1, k = 0;
        
        while(i <= mid && j <= right) {
            if(nums[i] <= nums[j])
                tmp[k++] = nums[i++];
            else
                tmp[k++] = nums[j++];
        }
        
        while(i <= mid)
            tmp[k++] = nums[i++];
        
        while(j <= right)
            tmp[k++] = nums[j++];
        
        copy(tmp.begin(), tmp.end(), nums.begin() + left);
    }
};

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 
 // Iterative BFS Solution:
 
class Solution {
public:
    int deepestLeavesSum(TreeNode* root) {
        queue<TreeNode*> Q;
        Q.push(root);
        
        int sum = 0;
        
        while(!Q.empty()) {
            int currentQueueSize = Q.size();
            sum = 0;
            for(int i = 0; i < currentQueueSize; i++) {
                TreeNode* currNode = Q.front();
                Q.pop();
                
                if(currNode -> left)
                    Q.push(currNode -> left);
                if(currNode -> right)
                    Q.push(currNode -> right);
                
                sum += currNode -> val;
            }
        }
        return sum;
    }
};

//Recursive DFS Solution: 

class Solution {
public:
    int sum = 0;
    int deepestLeavesSum(TreeNode* root) {
        int maxDepth = maximumDepth(root);
        
        return calculateSum(root, 1, maxDepth);
    }
    
    int maximumDepth(TreeNode* root) {
        if(!root)
            return 0;
        
        int lDepth = maximumDepth(root -> left);
        int rDepth = maximumDepth(root -> right);
        
        return max(lDepth, rDepth) + 1;
    }
    
    int calculateSum(TreeNode* root, int currentDepth, int maxDepth) {
        if(!root)
            return sum;
        
        if(currentDepth == maxDepth) 
            sum += root -> val;
        
        int lDepth = calculateSum(root -> left, currentDepth + 1, maxDepth);
        int rDepth = calculateSum(root -> right, currentDepth + 1, maxDepth);
        
        return sum;
    }
};

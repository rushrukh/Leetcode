/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
 
 // Iterative BFS Solution:
 
class Solution {
public:
    int deepestLeavesSum(TreeNode* root) {
        if(!root) return 0;
        
        queue<TreeNode*> Q;
        Q.push(root);
        int sum = 0;
        
        while(!Q.empty()) {
            int n = Q.size();
            sum = 0;
            
            for(int i = 0; i < n; i++) {
                TreeNode *curr = Q.front();
                Q.pop();
                
                sum += curr -> val;
                
                if(curr -> left) Q.push(curr -> left);
                if(curr -> right) Q.push(curr -> right);
            }
            
        }
        
        return sum;
    }
};

//Recursive DFS Solution: 

class Solution {
public:
    int sum = 0, max_depth = 0;
    int deepestLeavesSum(TreeNode* root) {
        if(!root) return 0;
        max_depth = find_depth(root);
        DFS(root, 1);
        
        return sum;
    }
    
    int find_depth(TreeNode* root) {
        if(!root) return 0;
        
        int left = find_depth(root -> left);
        int right = find_depth(root -> right);
        
        return max(left, right) + 1;
    }
    
    void DFS(TreeNode *root, int curr_depth) {
        if(!root) return;
        
        if(curr_depth == max_depth)
            sum += root -> val;
        
        DFS(root -> left, curr_depth + 1);
        DFS(root -> right, curr_depth + 1);
    }
};

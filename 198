//Top Down Soln: Time O(n), Space O(n);

class Solution {
public:
    int DP[101];
    int rob(vector<int>& nums) {
        memset(DP, -1, sizeof(DP));
        return knapSack(nums, nums.size());
    }
    int knapSack(vector<int>& nums, int n) {
        if(n <= 0) return 0;
        if(DP[n] != -1) return DP[n];
        
        return DP[n] = max(nums[n - 1] + knapSack(nums, n - 2), knapSack(nums, n - 1));
    }
};

//Bottom Up Soln: Time O(n), Space O(n);

class Solution {
public:
    int rob(vector<int>& nums) {
        if(nums.size() == 1) return nums[0];
        DP[0] = nums[0];
        DP[1] = max(nums[0], nums[1]);
        for(int i = 2; i < nums.size(); i++) {
            DP[i] = max(nums[i] + DP[i - 2], DP[i - 1]);
        }
        
        return DP[nums.size() - 1];
    }
};

//Bottom Up Soln: Time O(n), Space O(1);

class Solution {
public:
    int rob(vector<int>& nums) {
        if(nums.size() == 1) return nums[0];
        int first = nums[0];
        int second = max(nums[0], nums[1]);
        for(int i = 2; i < nums.size(); i++) {
            int tmp = max(nums[i] + first, second);
            first = second;
            second = tmp;
        }
        
        return second;
    }
};

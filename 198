//Top Down Soln: TC O(N), SC O(N);

class Solution {
public:
    vector<int> DP;
    int rob(vector<int>& nums) {
        DP.assign(nums.size(), -1);
        return max_profit(nums, nums.size() - 1);
    }
    
    int max_profit(vector<int> &nums, int i) {
        if(i == 0) return nums[i];
        if(i == 1) return max(nums[i], nums[i - 1]);
        if(DP[i] != -1) return DP[i];
        
        return DP[i] = max(nums[i] + max_profit(nums, i - 2), max_profit(nums, i - 1));
    }
};

//Bottom Up Soln: Time O(n), Space O(n);

class Solution {
public:
    int rob(vector<int>& nums) {
        if(nums.size() == 1) return nums[0];
        DP[0] = nums[0];
        DP[1] = max(nums[0], nums[1]);
        for(int i = 2; i < nums.size(); i++) {
            DP[i] = max(nums[i] + DP[i - 2], DP[i - 1]);
        }
        
        return DP[nums.size() - 1];
    }
};

//Bottom Up Soln: Time O(n), Space O(1);

class Solution {
public:
    int rob(vector<int>& nums) {
        if(nums.size() == 1) return nums[0];
        int first = nums[0];
        int second = max(nums[0], nums[1]);
        for(int i = 2; i < nums.size(); i++) {
            int tmp = max(nums[i] + first, second);
            first = second;
            second = tmp;
        }
        
        return second;
    }
};

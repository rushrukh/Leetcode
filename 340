// TC O(Nk), SC O(1)

class Solution {
public:
    int lengthOfLongestSubstringKDistinct(string s, int k) {
        if(k == 0) return 0;
        int left = 0, right = 0, max_len = INT_MIN;
        unordered_map<char, int> hash;
        
        while(right < s.size()) {
            if(hash.find(s[right]) != hash.end()) {
                hash[s[right]] = right;
            }
            else {
                if(hash.size() < k) {
                    hash[s[right]] = right;
                }
                else {
                    // we will have to find the char and it's index we will be getting rid of
                    int min_index = INT_MAX;
                    char min_index_char;
                
                    for(auto &pair: hash) {
                        if(pair.second < min_index) {
                            min_index = pair.second;
                            min_index_char = pair.first;
                        }
                    }
                    
                    hash.erase(min_index_char);
                    hash[s[right]] = right;
                    left = min_index + 1;
                }
            }
            
            max_len = max(max_len, right - left + 1);
            right++;
        }
        
        return max_len == INT_MIN ? 0 : max_len;
    }
};

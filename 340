// TC O(Nk), SC O(1)

class Solution {
public:
    int lengthOfLongestSubstringKDistinct(string s, int k) {
        if(!k) return 0;
        
        int left = 0, right = 0, max_len = INT_MIN;
        unordered_map<char, int> hash;
        
        while(right < s.size()) {
            if(hash.find(s[right]) != hash.end()) {
                hash[s[right]] = right;
            }
            else {
                if(hash.size() < k) {
                    hash[s[right]] = right;
                }
                else {
                    int leftmost_char_idx = INT_MAX;
                    char leftmost_char;
                    
                    for(auto &pair: hash) {
                        if(pair.second < leftmost_char_idx) {
                            leftmost_char_idx = pair.second;
                            leftmost_char = pair.first;
                        }
                    }
                    
                    left = leftmost_char_idx + 1;
                    hash.erase(leftmost_char);
                    hash[s[right]] = right;
                }
            }
            max_len = max(max_len, right - left + 1);
            right++;
        }
        
        return max_len;
    }
};

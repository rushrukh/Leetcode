//Top Down Soln: TC O(N^2), SC O(N^2)

class Solution {
public:
    vector<vector<int>> grid, DP;
    int m = 0, n = 0;
    int minFallingPathSum(vector<vector<int>>& grid) {
        this -> grid = grid, this -> m = grid.size(), this -> n = grid[0].size();
        DP.assign(m, vector<int> (n, -1));
        int answer = INT_MAX;
        
        for(int j = 0; j < n; j++)
            answer = min(answer, find_sum(0, j));
        return answer;
    }
    
    int find_sum(int i, int j) {
        if(j < 0 || j >= n) return INT_MAX;
        if(i == m) return 0;
        if(DP[i][j] != -1) return DP[i][j];
        
        int answer = INT_MAX;
        answer = min(answer, find_sum(i + 1, j - 1));
        answer = min(answer, find_sum(i + 1, j));
        answer = min(answer, find_sum(i + 1, j + 1));
        
        return DP[i][j] = grid[i][j] + answer;
    }
};

//Bottom Up Soln:

class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size(), minSum = INT_MAX;
        if(n == 1) return matrix[0][0];
        int DP[n + 1][n + 1];
        
        for(int i = 0; i < n + 1; i++)
            for(int j = 0; j < n + 1; j++)
                if(!i || !j) DP[i][j] = INT_MAX;
        
        for(int i = 1; i < n + 1; i++) DP[1][i] = matrix[0][i - 1];
        
        for(int i = 2; i < n + 1; i++)
            for(int j = 1; j < n + 1; j++) {
                DP[i][j] = min(DP[i - 1][j - 1], min(DP[i - 1][j], DP[i - 1][j + 1])) + matrix[i - 1][j - 1];
                if(i == n) minSum = min(minSum, DP[i][j]);
            }
        
        return minSum;
    }
};

//Bottom Up In-place:

class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size(), minSum = INT_MAX;
        if(n == 1) return matrix[0][0];
        
        for(int i = 1; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(j == 0) matrix[i][j] = min(matrix[i - 1][j], matrix[i - 1][j + 1]) + matrix[i][j];
                else if(j == n - 1) matrix[i][j] = min(matrix[i - 1][j], matrix[i - 1][j - 1]) + matrix[i][j];
                else matrix[i][j] = min(matrix[i - 1][j -1], min(matrix[i - 1][j], matrix[i - 1][j + 1])) + matrix[i][j];
                
                if(i == n - 1) minSum = min(minSum, matrix[i][j]);
            }
        }
        
        return minSum;
    }
};

//Top Down Soln:

class Solution {
public:
    int DP[101][101];
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size(), minSum = INT_MAX;
        memset(DP, -1, sizeof(DP));
        for(int i = 0; i < n; i++) minSum = min(minSum, helper(matrix, 0, i, n));

        return minSum;
    }
    int helper(vector<vector<int>>& matrix, int row, int col, int n) {
        if(row < 0 || row >= n || col < 0 || col >= n) return INT_MAX;
        if(DP[row][col] != -1) return DP[row][col];

        int leftDiagonal = helper(matrix, row + 1, col - 1, n);
        int directBottom = helper(matrix, row + 1, col, n);
        int rightDiagonal = helper(matrix, row + 1, col + 1, n);
        
        int currMin = min(leftDiagonal, min(directBottom, rightDiagonal));
        return DP[row][col] = currMin == INT_MAX ? 0 + matrix[row][col] : currMin + matrix[row][col];
    }
};

//Bottom Up Soln:

class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size(), minSum = INT_MAX;
        if(n == 1) return matrix[0][0];
        int DP[n + 1][n + 1];
        
        for(int i = 0; i < n + 1; i++)
            for(int j = 0; j < n + 1; j++)
                if(!i || !j) DP[i][j] = INT_MAX;
        
        for(int i = 1; i < n + 1; i++) DP[1][i] = matrix[0][i - 1];
        
        for(int i = 2; i < n + 1; i++)
            for(int j = 1; j < n + 1; j++) {
                DP[i][j] = min(DP[i - 1][j - 1], min(DP[i - 1][j], DP[i - 1][j + 1])) + matrix[i - 1][j - 1];
                if(i == n) minSum = min(minSum, DP[i][j]);
            }
        
        return minSum;
    }
};

//Bottom Up In-place:

class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size(), minSum = INT_MAX;
        if(n == 1) return matrix[0][0];
        
        for(int i = 1; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(j == 0) matrix[i][j] = min(matrix[i - 1][j], matrix[i - 1][j + 1]) + matrix[i][j];
                else if(j == n - 1) matrix[i][j] = min(matrix[i - 1][j], matrix[i - 1][j - 1]) + matrix[i][j];
                else matrix[i][j] = min(matrix[i - 1][j -1], min(matrix[i - 1][j], matrix[i - 1][j + 1])) + matrix[i][j];
                
                if(i == n - 1) minSum = min(minSum, matrix[i][j]);
            }
        }
        
        return minSum;
    }
};

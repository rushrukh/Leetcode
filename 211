struct TrieNode {
    TrieNode *children[26];
    bool isEndOfWord;
};

class WordDictionary {
public:
    /** Initialize your data structure here. */
    TrieNode *root;
    WordDictionary() {
        root = new TrieNode();
    }
    
    /** Adds a word into the data structure. */
    void addWord(string word) {
        
        TrieNode *curr = root;
        
        for(int i = 0; i < word.size(); i++) {
            int index = word[i] - 'a';
            if(!curr -> children[index])
                curr -> children[index] = new TrieNode();
            curr = curr -> children[index];                
        }
        curr -> isEndOfWord = true;
    }
    
    /** Returns if the word is in the data structure. A word could contain the dot character '.' to represent any one letter. */
    bool search(string word) {
        return actualSearch(word, root);
    }
    
    bool actualSearch(string word, TrieNode *curr) {
        
        for(int i = 0; i < word.size(); i++) {

            int index = word[i] - 'a';
            if(word[i] != '.') {
                if(!curr -> children[index])
                    return false;
                curr = curr -> children[index];
            } 
            
            else {
                for(int j = 0; j < 26; j++) {
                    if(curr -> children[j] && actualSearch(word.substr(i + 1), curr -> children[j])) 
                        return true;
                }
                return false;
            }
        }
        return curr -> isEndOfWord;
    }
};

/**
 * Your WordDictionary object will be instantiated and called as such:
 * WordDictionary* obj = new WordDictionary();
 * obj->addWord(word);
 * bool param_2 = obj->search(word);
 */

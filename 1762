// TC O(N), SC O(N): because, the result can contain N - 1 elements only to find out that the last element blocks everyone's ocean-view, then pops N - 1 elements.

class Solution {
public:
    vector<int> findBuildings(vector<int>& heights) {
        vector<int> result;
        
        for(int i = 0; i < heights.size(); i++) {
            if(result.empty()) result.push_back(i);
            else {
                if(heights[i] >= heights[result.back()]) {
                    while(result.size()) {
                        if(heights[i] >= heights[result.back()]) result.pop_back();
                        else break;
                    }
                }
                result.push_back(i);
            }
        }
        
        return result;
    }
};

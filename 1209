// TC O(N), SC O(N)

class Solution {
public:
    string removeDuplicates(string s, int k) {
        string result = "";
        stack<pair<char, int>> stk;
        stk.push({s[0], 1});
        
        for(int i = 1; i < s.size(); i++) {
            cout << s[i] << " ";
            if(!stk.empty() && s[i] == stk.top().first) {
                stk.push({s[i], stk.top().second + 1});
                
                if(stk.top().second == k) {
                    int pop = k;
                    while(pop) {
                        stk.pop();
                        pop--;
                    }
                }
            }
            else {
                stk.push({s[i], 1});
            }
        }
        
        while(!stk.empty()) {
            result += stk.top().first;
            stk.pop();
        }
        
        reverse(result.begin(), result.end());
        
        return result;
    }
};


// TC O(N), SC O(N)

class Solution {
public:
    string removeDuplicates(string s, int k) {
        int j = 0;
        stack<int> stk;
        
        for(int i = 0; i < s.size(); i++, j++) {
            s[j] = s[i];
            
            if(j == 0 || s[j] != s[j - 1]) {
                stk.push(1);
            }
            else {
                stk.top()++;
                if(stk.top() == k) {
                    stk.pop();
                    j -= k;
                }
            }
        }
        
        return s.substr(0, j);
    }
};

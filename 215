// Min-Heap Soln: TC O(N logk), SC O(k)

class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int, vector<int>, greater<int>> Q;
        
        for(int &num: nums) {
            Q.push(num);
            
            if(Q.size() > k)
                Q.pop();
        }
        
        return Q.top();
    }
};

// Quick Select TC O(N) - avg case, SC O(1)
class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        int left = 0, n = nums.size(), right = n - 1, idx = 0;
        k = n - k;
        
        while(true) {
            idx = partition(nums, left, right);
            
            if(idx == k) break;
            else if(idx < k)
                left = idx + 1;
            else
                right = idx - 1;
        }
        
        return nums[idx];
    }
    
    int partition(vector<int>& nums, int left, int right) {
        int pivot = nums[right], p = left;
        
        for(int i = left; i < right; i++) {
            if(nums[i] <= pivot) {
                swap(nums[i], nums[p]);
                p++;
            }
        }
        
        swap(nums[right], nums[p]);
        return p;
    }
};

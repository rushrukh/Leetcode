// Min-Heap Soln: TC O(N logk), SC O(k)

class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        priority_queue<int, vector<int>, greater<int>> Q;
        
        for(int &num: nums) {
            Q.push(num);
            
            if(Q.size() > k)
                Q.pop();
        }
        
        return Q.top();
    }
};


class Solution {
public:
    int findKthLargest(vector<int>& nums, int k) {
        int n = nums.size(), left = 0, right = n - 1, pivot = -1;
        // k = n - k;
        
        while(left <= right) {
            pivot = find_pivot(nums, left, right);
            if(pivot + 1 == k)
                break;
            else if(pivot < k)
                left = pivot + 1;
            else if(pivot > k)
                right = pivot - 1;
        }
        
        return nums[pivot];
    }
    
    int find_pivot(vector<int>& nums, int left, int right) {
        int pivot = nums[right], p = left - 1;
        
        for(int i = left; i < right; i++) {
            if(nums[i] <= pivot)
                swap(nums[++p], nums[i]);
        }
        
        swap(nums[++p], nums[right]);
        
        return p;
    }
};

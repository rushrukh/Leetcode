// Brute Force: TC O(N^2), SC O(1)

class Solution {
public:
    int trap(vector<int>& height) {
        int result = 0; 
        
        // loop through each element
        for(int i = 0; i < height.size(); i++) {
            int left_max = INT_MIN, right_max = INT_MIN;
            
            // find left_max
            for(int left = i; left >= 0; left--) {
                left_max = max(left_max, height[left]);
            }
            
            // find right_max
            for(int right = i; right < height.size(); right++) {
                right_max = max(right_max, height[right]);
            }
            
            int x = min(left_max, right_max) - height[i];
            result += x > 0 ? x : 0;
        }
        
        return result;
    }
};

// DP: TC O(N), SC O(N)

class Solution {
public:
    int trap(vector<int>& height) {
        int size = height.size(), result = 0;
        vector<int> left(size, 0), right(size, 0);
        left[0] = height[0], right[size - 1] = height[size - 1];
        
        for(int i = 1; i < size; i++) {
            left[i] = max(left[i - 1], height[i]);
        }
        
        for(int i = size - 2; i >= 0; i--) {
            right[i] = max(right[i + 1], height[i]);
        }
        
        for(int i = 1; i < size; i++) {
            result += min(left[i], right[i]) - height[i];
        }
        
        return result;
    }
};


// TC O(N), SC O(1)

class Solution {
public:
    int trap(vector<int>& height) {
        int left = 0, right = height.size() - 1, left_max = height[0], right_max = height[height.size() - 1], result = 0;
        
        while(left < right) {
            // first we check if left wall is smaller or right wall
            if(height[left] < height[right]) {
                 // left wall may have to do something with containing water
                //  okay since left wall is smaller
                //  it is either the biggest wall seen on left so far
                //  or it will contain some water
                if(height[left] >= left_max) {
                    // sadly this is the biggest wall, hence no water
                    left_max = height[left];
                }
                else {
                    // yay we have seen bigger walls on the left side before
                    // time to pour some water to this index
                    // How much water? well, left_max - height[left] amount of water
                    // How are we certain that it wont cause an issue? Well
                    // if the left_max wall was bigger than anything on the right
                    // we wouldn't have entered this block
                    // we have only updated left_max with a new left big wall
                    // after we made sure that there is a bigger wall on the right side than this
                    result += left_max - height[left];
                }
                
                left++;
            }
            else {
                // right wall may have to do something with containing water
                
                if(height[right] >= right_max) {
                    // sadly this is the biggest wall, hence no water
                    right_max = height[right];
                }
                else {
                    // yay we have seen a bigger wall on the right before
                    // time to pour in some water to this index
                    result += right_max - height[right];
                }
                
                right--;
            }
        }
        
        return result;
    }
};

// TC O(N), SC O(1)

class Solution {
public:
    void nextPermutation(vector<int>& nums) {
        int pivot = find_decreasing_item(nums);
        if(pivot < 0) {
            reverse(nums.begin(), nums.end());
            return;
        }
        
        int min_next_item = INT_MAX, min_idx = 0;
        for(int i = pivot + 1; i < nums.size(); i++)
            if(nums[i] <= min_next_item && nums[i] > nums[pivot]) {
                min_next_item = nums[i];
                min_idx = i;
            }
        
        swap(nums[pivot], nums[min_idx]);
        
        int left = pivot + 1, right = nums.size() - 1;
        
        while(left <= right)
            swap(nums[left++], nums[right--]);
    }
    
    int find_decreasing_item(vector<int> &nums) {
        for(int i = nums.size() - 1; i >= 1; i--)
            if(nums[i] > nums[i - 1])
                return i - 1;
        
        return -1;
    }
};

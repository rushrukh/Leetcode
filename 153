// TC O (log N), SC O (1)

class Solution {
public:
    int findMin(vector<int>& nums) {
        // Simply put, the problem asks you to search for the pivot point.
        
        // First, let's try to sketch the complete algorithm
        
        // Pivot point is i + 1 iff nums[i] > nums[i + 1]
        // Else, nums[i] < nums[i + 1] is true for both side of the pivot point of the array.
        // So, what determines if we are on the left side or the right side of the pivot point?
        // if nums[mid] > nums[high] then we are on the left side of the pivot, need to move rightwards.
        // else if nums[mid] < nums[high] then we are on the right side of the pivot, need to move leftwards.
        
        //let's quickly implement the binary search, and then think carefully about the edge cases with
        // array size being 1, 2, 3 .. 
        
        if(nums.size() == 1) return nums[0];
        int low = 0, high = nums.size() - 1, mid = 0;
        
        while(low < high) {
            mid = low + (high - low) / 2;
            
            if(nums[mid] > nums[mid + 1]) return nums[mid + 1];
            else {
                if(nums[mid] > nums[high]) low = mid + 1;
                else high = mid;
            }
        }
        
        return nums[low];
    }
};


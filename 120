//Top Down Soln:

class Solution {
public:
    int DP[201][203];
    int minimumTotal(vector<vector<int>>& triangle) {
        memset(DP, -1, sizeof(DP));
        return helper(triangle, 0, 0);      
    }
    
    int helper(vector<vector<int>>& triangle, int row, int col) {
        if(row >= triangle.size() || col >= triangle[row].size()) return 0;
        if(DP[row][col] != -1) return DP[row][col];
        
        return DP[row][col] = triangle[row][col] + min(helper(triangle, row + 1, col), helper(triangle, row + 1, col + 1));
    }
};

//Bottom Up Soln:

class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int n = triangle.size();
        int DP[n][n];
        memset(DP, 0, sizeof(DP));
        
        for(int i = 0; i < n; i++)
            DP[n - 1][i] = triangle[n - 1][i];
        
        for(int i = n - 2; i >= 0; i--) 
            for(int j = 0; j < triangle[i].size(); j++) 
                DP[i][j] = triangle[i][j] + min(DP[i + 1][j], DP[i + 1][j + 1]);
        
        return DP[0][0];      
    }
};

//Bottom Up In Place Soln:

class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int n = triangle.size();
        
        for(int i = n - 2; i >= 0; i--) 
            for(int j = 0; j < triangle[i].size(); j++) 
                triangle[i][j] = triangle[i][j] + min(triangle[i + 1][j], triangle[i + 1][j + 1]);
        
        return triangle[0][0];      
    }
};

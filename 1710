// TC O(NlogN), SC O(logN)

class Solution {
public:
    static bool compare(vector<int> A, vector<int> B) {
        return A[1] > B[1];
    }
    int maximumUnits(vector<vector<int>>& boxTypes, int truckSize) {
        sort(boxTypes.begin(), boxTypes.end(), compare);
        
        int units = 0;
        for(auto &box: boxTypes) {
            int number_of_box = min(box[0], truckSize);
            units += number_of_box * box[1];
            truckSize -= number_of_box;
            
            if(!truckSize) break;
        }
        
        return units;
    }
};

// TC O(NlogN), SC O(N)

class Solution {
public:
    int maximumUnits(vector<vector<int>>& boxTypes, int truckSize) {
        
        auto comp = [](vector<int> A, vector<int> B) {
            return A[1] < B[1];
        };
        priority_queue<vector<int>, vector<vector<int>>, decltype(comp)> Q(comp);
        
        for(auto box: boxTypes)
            Q.push(box);
        
        int units = 0;
        while(!Q.empty()) {
            int box = Q.top()[0], unit = Q.top()[1];
            Q.pop();
            box = min(box, truckSize);
            
            units += box * unit;
            truckSize -= box;
            
            if(!truckSize) break;
        }
        
        return units;
    }
};

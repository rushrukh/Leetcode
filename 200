// TC O(M x N), SC O(M x N)

class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        int islands = 0, m = grid.size(), n = grid[0].size();
        
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == '1') {
                    DFS(grid, i, j, m, n);
                    islands++;
                }
            }
        }
        
        return islands;
    }
    
    void DFS(vector<vector<char>> &grid, int i, int j, int m, int n) {
        if(i < 0 || j < 0 || i >= m || j >= n || grid[i][j] == '0')
            return;
        
        grid[i][j] = '0';
        
        if(i + 1 < m && grid[i + 1][j] == '1')
            DFS(grid, i + 1, j, m, n);
        if(i - 1 >= 0 && grid[i - 1][j] == '1')
            DFS(grid, i - 1, j, m, n);
        if(j + 1 < n && grid[i][j + 1] == '1')
            DFS(grid, i, j + 1, m, n);
        if(j - 1 >= 0 && grid[i][j - 1] == '1')
            DFS(grid, i, j - 1, m, n);
    }
};


// TC O(M * N), SC O(min(M, N)

class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        int row = grid.size(), col = grid[0].size(), islands = 0;
        
        for(int i = 0; i < row; i++) {
            for(int j = 0; j < col; j++) {
                if(grid[i][j] == '1') {
                    islands++;
                    
                    queue<pair<int,int>> Q;
                    Q.push({i, j});
                    
                    while(!Q.empty()) {
                        int r = Q.front().first, c = Q.front().second;
                        Q.pop();
                        
                        if(r - 1 >= 0 && grid[r - 1][c] == '1') {
                            grid[r - 1][c] = '0';
                            Q.push({r - 1, c});
                        }
                        
                        if(r + 1 < row && grid[r + 1][c] == '1') {
                            grid[r + 1][c] = '0';
                            Q.push({r + 1, c});
                        }
                        
                        if(c - 1 >= 0 && grid[r][c - 1] == '1') {
                            grid[r][c - 1] = '0';
                            Q.push({r, c - 1});
                        }
                        
                        if(c + 1 < col && grid[r][c + 1] == '1') {
                            grid[r][c + 1] = '0';
                            Q.push({r, c + 1});
                        }
                    }
                }
            }
        }
        
        return islands;
    }
};


// TC O(M*N), SC O(M*N)

cclass Solution {
public:
    vector<int> parent, rank;
    int numIslands(vector<vector<char>>& grid) {
        int m = grid.size(), n = grid[0].size(), islands = 0;
        init_grid(grid);
        
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == '1') {
                    
                    grid[i][j] = '0';
                    
                    if(i - 1 >= 0 && grid[i - 1][j] == '1')
                        Union((i - 1) * n + j, i * n + j);
                    
                    if(i + 1 < m && grid[i + 1][j] == '1')
                        Union((i + 1) * n + j, i * n + j);
                    
                    if(j - 1 >= 0 && grid[i][j - 1] == '1')
                        Union((i) * n + j - 1, i * n + j);
                    
                    if(j + 1 < n && grid[i][j + 1] == '1')
                        Union((i) * n + j + 1, i * n + j);
                }
            }
        }
        
        for(int &r: rank)
            if(r > 0)
                islands++;
        
        return islands;
    }
    
    void Union(int u, int v) {
        int parent_u = find_parent(u), parent_v = find_parent(v);
        
        if(parent_u == parent_v) return;
        
        if(rank[parent_u] < rank[parent_v]) {
            swap(parent_u, parent_v);
        }
        
        parent[parent_v] = parent_u;
        rank[parent_u] += rank[parent_v];
        rank[parent_v] = 0;
    }
    
    int find_parent(int x) {
        if(parent[x] == x)
            return x;
        
        return parent[x] = find_parent(parent[x]);
    }
    
    void init_grid(vector<vector<char>> &grid) {
        int m = grid.size(), n = grid[0].size();
        
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == '1')
                    rank.push_back(1);
                else
                    rank.push_back(0);
                
                parent.push_back(i * n + j);
            }
        }
    }
};

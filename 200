// TC O(M x N), SC O(M x N)

class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        int ans = 0;
        
        for(int i = 0; i < grid.size(); i++) {
            for(int j = 0; j < grid[i].size(); j++) {
                if(grid[i][j] == '1') {
                    DFS(grid, i, j);
                    ans++;
                }
            }
        }
        
        return ans;
    }
    
    void DFS(vector<vector<char>>& grid, int i, int j) {
        if(i < 0 || i >= grid.size() || j < 0 || j >= grid[i].size() || grid[i][j] == '0')
            return;
        
        grid[i][j] = '0';
        
        DFS(grid, i + 1, j);
        DFS(grid, i - 1, j);
        DFS(grid, i, j + 1);
        DFS(grid, i, j - 1);
    }
};


// TC O(M * N), SC O(min(M, N)

class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        int row = grid.size(), col = grid[0].size(), islands = 0;
        
        for(int i = 0; i < row; i++) {
            for(int j = 0; j < col; j++) {
                if(grid[i][j] == '1') {
                    islands++;
                    
                    queue<pair<int,int>> Q;
                    Q.push({i, j});
                    
                    while(!Q.empty()) {
                        int r = Q.front().first, c = Q.front().second;
                        Q.pop();
                        
                        if(r - 1 >= 0 && grid[r - 1][c] == '1') {
                            grid[r - 1][c] = '0';
                            Q.push({r - 1, c});
                        }
                        
                        if(r + 1 < row && grid[r + 1][c] == '1') {
                            grid[r + 1][c] = '0';
                            Q.push({r + 1, c});
                        }
                        
                        if(c - 1 >= 0 && grid[r][c - 1] == '1') {
                            grid[r][c - 1] = '0';
                            Q.push({r, c - 1});
                        }
                        
                        if(c + 1 < col && grid[r][c + 1] == '1') {
                            grid[r][c + 1] = '0';
                            Q.push({r, c + 1});
                        }
                    }
                }
            }
        }
        
        return islands;
    }
};

class Solution {
public:
    int numIslands(vector<vector<char>>& grid) {
        int count = 0;
        for(int i = 0; i < grid.size(); i++) 
            for(int j = 0; j < grid[i].size(); j++) 
                if(grid[i][j] == '1' && DFS(grid, i, j)) count++;
        
        return count;
    }
    
    bool DFS(vector<vector<char>>& grid, int i, int j) {
        if(i < 0 || j < 0 || i >= grid.size() || j >= grid[i].size() || grid[i][j] == '0') return false;
        
        if(grid[i][j] == '-') return true;
        grid[i][j] = '-';
        
        bool up = DFS(grid, i - 1, j);
        bool down = DFS(grid, i + 1, j);
        bool left = DFS(grid, i, j - 1);
        bool right = DFS(grid, i, j + 1);
        
        return true;
    }
};

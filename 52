// TC O(), SC O()

class Solution {
public:
    int n = 0;
    int totalNQueens(int n) {
        unordered_set<int> cols, diagonals, antidiagonals;
        this -> n = n;
        return find_combinations(0, cols, diagonals, antidiagonals);
    }
    
    int find_combinations(int row, unordered_set<int> &cols, unordered_set<int> &diagonals, unordered_set<int> &antidiagonals) {
        if(row == n) {
            return 1;
        }
        
        int solution = 0;
        
        for(int col = 0; col < n; col++) {
            int diagonal = row - col, antidiagonal = row + col;
            
            // check if queen is placable:
            if(cols.find(col) != cols.end() || diagonals.find(diagonal) != diagonals.end() || antidiagonals.find(antidiagonal) != antidiagonals.end())
                continue;
            
            cols.insert(col);
            diagonals.insert(diagonal);
            antidiagonals.insert(antidiagonal);
            
            solution += find_combinations(row + 1, cols, diagonals, antidiagonals);
            
            cols.erase(col);
            diagonals.erase(diagonal);
            antidiagonals.erase(antidiagonal);
        }
        
        return solution;
    }
};

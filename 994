// TC O(M*N), SC O(M*N) 

class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int row = grid.size(), col = grid[0].size(), depth = 0;
        
        for(int i = 0; i < row; i++) {
            for(int j = 0; j < col; j++) {
                if(grid[i][j] == 2)
                    DFS(grid, i, j, row, col, 2);
            }
        }
        
        for(int i = 0; i < row; i++) {
            for(int j = 0; j < col; j++) {
                if(grid[i][j] == 1)
                    return -1;
                else
                    depth = max(depth, grid[i][j]);
            }
        }
        
        return depth - 2 > 0 ? depth - 2: 0;
    }
    
    void DFS(vector<vector<int>> &grid, int i, int j, int row, int col, int depth) {
        if(i < 0 || i >= row || j < 0 || j >= col || grid[i][j] == 0)
            return;
        
        if(grid[i][j] == 1 || grid[i][j] >= depth) {
            grid[i][j] = depth;
            DFS(grid, i - 1, j, row, col, depth + 1);
            DFS(grid, i + 1, j, row, col, depth + 1);
            DFS(grid, i, j - 1, row, col, depth + 1);
            DFS(grid, i, j + 1, row, col, depth + 1);
        }
    }
};

// TC O(MN), SC O(min(M, N))

class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        queue<pair<int, int>> Q;
        int m = grid.size(), n = grid[0].size(), time = 0, fresh = 0;
        
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == 2)
                    Q.push({i, j});
                else if(grid[i][j] == 1)
                    fresh++;
            }
        }
        
        while(!Q.empty()) {
            int q_size = Q.size();
            
            for(int i = 0; i < q_size; i++) {
                int row = Q.front().first, col = Q.front().second;
                Q.pop();
                
                if(is_valid(row - 1, col, m, n) && grid[row - 1][col] == 1) {
                    grid[row - 1][col] = 2;
                    Q.push({row - 1, col});
                    fresh--;
                }
                
                if(is_valid(row + 1, col, m, n) && grid[row + 1][col] == 1) {
                    grid[row + 1][col] = 2;
                    Q.push({row + 1, col});
                    fresh--;
                }
                
                if(is_valid(row, col - 1, m, n) && grid[row][col - 1] == 1) {
                    grid[row][col - 1] = 2;
                    Q.push({row, col - 1});
                    fresh--;
                }
                
                if(is_valid(row, col + 1, m, n) && grid[row][col + 1] == 1) {
                    grid[row][col + 1] = 2;
                    Q.push({row, col + 1});
                    fresh--;
                }
            }
            
            time++;
        }
        
        return fresh ? -1 : time > 0 ? time - 1 : 0;
    }
    
    bool is_valid(int row, int col, int m, int n) {
        return (row >= 0 && row < m && col >= 0 && col < n);
    }
};

// TC O(M*N), SC O(M*N) 

class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid) {
        int row = grid.size(), col = grid[0].size(), depth = 0;
        
        for(int i = 0; i < row; i++) {
            for(int j = 0; j < col; j++) {
                if(grid[i][j] == 2)
                    DFS(grid, i, j, row, col, 2);
            }
        }
        
        for(int i = 0; i < row; i++) {
            for(int j = 0; j < col; j++) {
                if(grid[i][j] == 1)
                    return -1;
                else
                    depth = max(depth, grid[i][j]);
            }
        }
        
        return depth - 2 > 0 ? depth - 2: 0;
    }
    
    void DFS(vector<vector<int>> &grid, int i, int j, int row, int col, int depth) {
        if(i < 0 || i >= row || j < 0 || j >= col || grid[i][j] == 0)
            return;
        
        if(grid[i][j] == 1 || grid[i][j] >= depth) {
            grid[i][j] = depth;
            DFS(grid, i - 1, j, row, col, depth + 1);
            DFS(grid, i + 1, j, row, col, depth + 1);
            DFS(grid, i, j - 1, row, col, depth + 1);
            DFS(grid, i, j + 1, row, col, depth + 1);
        }
    }
};

// Brute Force Soln:

class Solution {
public:
    int largestVariance(string s) {
        int variance = 0, n = s.size();
        
        for(int i = 0; i < n; i++) {
            for(int j = i; j < n; j++) {
                unordered_map<char, int> tmp_hash;    
                for(int k = i; k <= j; k++) {
                    tmp_hash[s[k]]++;
                }
                
                if(tmp_hash.size() > 1) {
                    int mx = INT_MIN, mn = INT_MAX;
                    for(auto &pair: tmp_hash) {
                        mx = max(mx, pair.second);
                        mn = min(mn, pair.second);
                    }
                    variance = max(variance, abs(mx - mn));
                }
            }
        }
        
        return variance;
    }
};


// TC O(26 * 26 * N), SC O(1)

class Solution {
public:
    int largestVariance(string s) {
        int result = 0;
        for(char high_freq_char = 'a'; high_freq_char <= 'z'; high_freq_char++) {
            for(char low_freq_char = 'a'; low_freq_char <= 'z'; low_freq_char++) {
                if(high_freq_char == low_freq_char)
                    continue;

                int high_freq = 0, low_freq = 0;
                int low_freq_abandoned = false;

                for(const char &ch: s) {
                    if(ch == high_freq_char) high_freq++;
                    if(ch == low_freq_char) low_freq++;

                    if(low_freq > 0) {
                        result = max(result, high_freq - low_freq);
                    }
                    else {
                        if(low_freq_abandoned) {
                            result = max(result, high_freq - 1);
                        }
                    }

                    if(low_freq > high_freq) {
                        high_freq = 0;
                        low_freq = 0;
                        low_freq_abandoned = true;
                    }
                }
            }
        }

        return result;
    }
};

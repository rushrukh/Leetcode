// Trie

class TrieNode {
public:
    bool end_of_word;
    unordered_map<char, TrieNode*> children;
    TrieNode(): end_of_word(false), children(unordered_map<char, TrieNode*> ()) {}
};

class Trie {
public:
    TrieNode *root;
    Trie() {
        root = new TrieNode();
    }
    
    void insert(string word) {
        TrieNode *curr = root;
        
        for(char &c: word) {
            if(curr -> children.find(c) == curr -> children.end()) {
                curr -> children[c] = new TrieNode();
            }
            
            curr = curr -> children[c];
        }
        
        curr -> end_of_word = true;
    }
    
    bool search(string word) {
        TrieNode *curr = root;
        
        for(char &c: word) {
            if(curr -> children.find(c) == curr -> children.end()) return false;
            curr = curr -> children[c];
        }
        
        return curr -> end_of_word ? true : false;
    }
    
    bool startsWith(string prefix) {
        TrieNode *curr = root;
        
        for(char &c: prefix) {
            if(curr -> children.find(c) == curr -> children.end()) return false;
            curr = curr -> children[c];
        }
        
        return true;
    }
};

/**
 * Your Trie object will be instantiated and called as such:
 * Trie* obj = new Trie();
 * obj->insert(word);
 * bool param_2 = obj->search(word);
 * bool param_3 = obj->startsWith(prefix);
 */

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int calculateGrandChildren(TreeNode* root) {
        int sum = 0;
        
        if(root) {
            if(root -> left) {
                if(root -> left -> left) 
                    sum += root -> left -> left -> val;
                
                if(root -> left -> right) 
                    sum += root -> left -> right -> val;
            }
            
            if(root -> right) {
                if(root -> right -> left) 
                    sum += root -> right -> left -> val;

                if(root -> right -> right) 
                    sum += root -> right -> right -> val;
            }
        }
        
        return sum;
    }
    
    int sumEvenGrandparent(TreeNode* root) {
        
        unordered_map<TreeNode*, int> phase;
        stack<TreeNode*> st;
        
        st.push(root);
        int ans = 0;
        
        while(!st.empty()) {
            
            TreeNode* curr = st.top();
            
            if(curr == NULL) {
                st.pop();
                continue;
            }
            if(phase[curr] == 0) 
                if((curr -> val % 2) == 0)
                    ans += calculateGrandChildren(curr);
            
            else if(phase[curr] == 1) 
                st.push(curr -> left);
            
            else if(phase[curr] == 2) 
                st.push(curr -> right);
            
            else
                st.pop();
            
            phase[curr]++;
        }
        return ans;
    }
};

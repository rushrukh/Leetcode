/*

Time Complexity:

n = s.length()
a = words.length()
b = words[0].length()
p = a * b

Helper Function Time Complexity Analysis:
  - We run a loop for a times.
  - In each of those iterations, we create a substring of length b. 
  - In total, we do operations in O(a * b).
  - Rest of the operatiosn are O(1).
  
Hence, helper function is O(a * b).

Main Function Time Complexity Analysis:
  - We loop through the string s a total of n - (a * b) times.
  - In each of those iterations, we call the helper function.
  - In total, we do operations in O((n - ab) * ab)
  - We can say the upper bound is O(n * a * b)
  
  
Space Complexity: O(a) for the hash.
*/

class Solution {
public:
    vector<int> findSubstring(string s, vector<string>& words) {
        int n = s.length(), words_length = words.size(), word_length = words[0].size();
        int pattern_length = words_length * word_length;
        vector<int> result;
        unordered_map<string, int> hash;
        
        for(auto &word: words)
            hash[word]++;
        
        for(int i = 0; i < n - pattern_length + 1; i++) {
            if(is_valid(s, i, hash, words_length, word_length))
                result.push_back(i);
        }
        
        return result;
    }
    bool is_valid(string &s, int starting_index, unordered_map<string, int> hash, int &words_length, int &word_length) {
        for(int i = 0; i < words_length; i++) {
            string curr_str = s.substr(starting_index, word_length);
            if(hash.find(curr_str) != hash.end() && hash[curr_str] > 0) {
                hash[curr_str]--;
                starting_index += word_length;
            }
            else {
                return false;
            }
        }
        
        return true;
    }
};


/*

Time Complexity:

n = s.length()
a = words.length()
b = words[0].length()
p = a * b

Helper Function Time Complexity Analysis:
  - We run a loop for n/b times: O(n/b).
  - In each of those iterations, we create a substring of length b: O(b). 
  - In total, we do operations in O(n/b * b): O(n)
  - Rest of the operatiosn are O(1).
  
Hence, helper function is O(n).

Main Function Time Complexity Analysis:
  - We call the helper function b times: O(b * n) => O(nb)
  - We create a hash of all the words: O(a)
  - We can say the upper bound is O(a + nb)
  
  
Space Complexity: O(a) for the hash.
*/

class Solution {
public:
    int word_length = 0, words_length = 0, s_length = 0;
    unordered_map<string, int> hash;
    vector<int> result;
    vector<int> findSubstring(string s, vector<string>& words) {
        word_length = words[0].size(), words_length = words.size(), s_length = s.size();
        
        for(string &word: words)
            hash[word]++;
        
        // we hop the string one word_length, from the first word, to the next and so on.
        // word_length = 3. If we start from 0, we do 0, 3, 6, 9 ..
        // We miss 1, 2, 4, 5, ..
        // So, we start from 0, 1, 2 for word_length
        // Thus we will cover all indices
        // 0, 3, 6, 9
        // 1, 4, 7, 10
        // 2, 5, 8, 11
        for(int i = 0; i < word_length; i++) {
            find_substr(s, i);
        }
        
        return result;
    }
    
    void find_substr(string &s, int starting_index) {
        unordered_map<string, int> tmp_hash;
        int n = 0, left = starting_index, right = starting_index;
        
        while(right < s_length - word_length + 1) {
            string curr_str = s.substr(right, word_length);
            
            if(hash.find(curr_str) != hash.end()) {
                if(tmp_hash.find(curr_str) == tmp_hash.end() || tmp_hash[curr_str] < hash[curr_str]) {
                    tmp_hash[curr_str]++;
                    n++;
                    right += word_length;
                }
                else {
                    tmp_hash[s.substr(left, word_length)]--;
                    n--;
                    left += word_length;
                }
            }
            else {
                right += word_length;
                left = right;
                n = 0;
                tmp_hash.clear();
            }
            
            if(n == words_length) {
                result.push_back(left);
                tmp_hash[s.substr(left, word_length)]--;
                n--;
                left += word_length;
            }
        }
    }
};

class Node {
public:
    int key, value;
    Node *prev = NULL, *next = NULL;
    Node(int x, int y) {
        key = x;
        value = y;
    }
};

class LRUCache {
public:
    Node *head = new Node(-1, -1), *tail = new Node(-1, -1);
    int capacity = 0, curr_size = 0;
    unordered_map<int, Node*> map;
    
    LRUCache(int capacity) {
        this -> capacity = capacity;
        head -> next = tail;
        tail -> prev = head;
    }
    
    void insert(int key, int value) {
        Node *new_node = new Node(key, value);
        map[key] = new_node;
        
        head -> next -> prev = new_node;
        new_node -> next = head -> next;
        
        head -> next = new_node;
        new_node -> prev = head;
        
        curr_size++;
    }
    
    void remove(Node *remove_this) {
        int curr_key = remove_this -> key;
        map.erase(curr_key);
        
        remove_this -> prev -> next = remove_this -> next;
        remove_this -> next -> prev = remove_this -> prev;
        
        curr_size--;
    }
    
    int get(int key) {
        if(map.find(key) == map.end())
            return -1;
        
        Node *curr_node = map[key];
        int return_val = curr_node -> value;
        
        map.erase(curr_node -> key);
        remove(curr_node);
        insert(key, return_val);
        
        return return_val;
    }
    
    void put(int key, int value) {
        if(map.find(key) != map.end()) {
            Node *curr_node = map[key];
            map.erase(key);
            remove(curr_node);
            insert(key, value);            
        }
        else {
            if(curr_size == capacity) {
                remove(tail -> prev);
            }
            insert(key, value);
        }
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */

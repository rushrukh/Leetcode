class Node {
public:
    int key, value;
    Node *prev = NULL, *next = NULL;
    Node(int x, int y) {
        key = x;
        value = y;
    }
};

class LRUCache {
public:
    Node *head = new Node(-1, -1), *tail = new Node(-1, -1);
    int capacity = 0, curr_size = 0;
    unordered_map<int, Node*> map;
    
    LRUCache(int capacity) {
        this -> capacity = capacity;
        head -> next = tail;
        tail -> prev = head;
    }
    
    void add(Node *node) {
        head -> next -> prev = node;
        node -> next = head -> next;
        
        head -> next = node;
        node -> prev = head;
    }
    
    void remove(Node *node) {
        node -> prev -> next = node -> next;
        node -> next -> prev = node -> prev;
    }
    
    int get(int key) {
        if(map.find(key) == map.end())
            return -1;
        
        Node *curr = map[key];
        int ans = curr -> value;
        
        remove(curr);
        add(curr);
        
        return ans;
    }
    
    void put(int key, int value) {
        if(map.find(key) != map.end()) {
            Node *curr = map[key];
            curr -> value = value;
            
            remove(curr);
            add(curr);
        }
        else {
            Node *curr = new Node(key, value);
            add(curr);
            map[key] = curr;
            curr_size++;
            
            if(curr_size > capacity) {
                map.erase(tail -> prev -> key);
                remove(tail -> prev);
                curr_size--;
            }
        }
    }
};

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache* obj = new LRUCache(capacity);
 * int param_1 = obj->get(key);
 * obj->put(key,value);
 */

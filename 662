// DFS: TC O(N), SC O(N)

class Solution {
public:
    unsigned long long max_width = 0;
    unordered_map<int, unsigned long long> hash;
    int widthOfBinaryTree(TreeNode* root) {
        DFS(root, 0, 1);
        return max_width + 1;
    }
    
    void DFS(TreeNode *root, int depth, int column_index) {
        if(!root) return;
        if(hash.find(depth) == hash.end())
            hash[depth] = column_index;
        else max_width = max(max_width, column_index - hash[depth]);
        
        if(root -> left)
            DFS(root -> left, depth + 1, 2 * (column_index - hash[depth]));
        if(root -> right) 
            DFS(root -> right, depth + 1, 2 * (column_index - hash[depth]) + 1);
    }
};

// BFS: TC O(N), SC O(N)

class Solution {
public:
    int widthOfBinaryTree(TreeNode* root) {
        unsigned long long max_width = 0;
        queue<pair<TreeNode*, unsigned long long>> Q;
        Q.push({root, 1});
        
        while(!Q.empty()) {
            int n = Q.size();
            unsigned long long min_idx = INT_MAX, max_idx = 0;
            
            for(int i = 0; i < n; i++) {
                TreeNode *curr = Q.front().first;
                unsigned long long col_index = Q.front().second;
                Q.pop();
                
                if(i == 0) min_idx = col_index;
                if(i == n - 1) max_idx = col_index;
                if(curr -> left) Q.push({curr -> left, col_index * 2});
                if(curr -> right) Q.push({curr -> right, col_index * 2 + 1});
            }
            
            max_width = max(max_width, max_idx - min_idx);
        }
        
        return max_width + 1;
    }
};

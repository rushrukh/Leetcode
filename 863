/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        // Find parent of each node
        if(!target) return {};
        
        unordered_map<TreeNode*, TreeNode*> parent;
        queue<TreeNode*> Q;
        Q.push(root);
        parent[root] = NULL;
        
        while(!Q.empty()) {
            TreeNode* curr = Q.front();
            Q.pop();
            
            if(curr -> left) {
                parent[curr -> left] = curr;
                Q.push(curr -> left);
            }
            
            if(curr -> right) {
                parent[curr -> right] = curr;
                Q.push(curr -> right);
            }
        }
        
        Q.push(target);
        unordered_set<TreeNode*> visited;
        visited.insert(target);
        
        int level = 0;
        while(!Q.empty()) {
            int n = Q.size();
            if(level == k) break;
            
            for(int i = 0; i < n; i++) {
                TreeNode *curr = Q.front();
                Q.pop();
                
                if(curr -> left && visited.find(curr -> left) == visited.end()) {
                    Q.push(curr -> left);
                    visited.insert(curr -> left);
                }
                    
                
                if(curr -> right && visited.find(curr -> right) == visited.end()) {
                    Q.push(curr -> right);
                    visited.insert(curr -> right);
                }
                
                if(parent[curr] && visited.find(parent[curr]) == visited.end()) {
                    Q.push(parent[curr]);
                    visited.insert(parent[curr]);
                }
            }
            
            level++;
        }
        
        vector<int> result;
        
        while(!Q.empty()) {
            result.push_back(Q.front() -> val);
            Q.pop();
        }
        
        return result;
    }
};

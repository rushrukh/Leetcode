class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        stack<ListNode*> s1, s2;
        
        while(headA) {
            s1.push(headA);
            headA = headA -> next;
        }
        while(headB) {
            s2.push(headB);
            headB = headB -> next;
        }
        
        if(s1.top() != s2.top()) return NULL;
       
        ListNode* tmp = NULL;
        while(!s1.empty() && !s2.empty()) {
            if(s1.top() == s2.top()) {
                tmp = s1.top();
                s1.pop();
                s2.pop();
            } 
            else break;
        }
        
        return tmp;
    }
};

// TC O(N + M), SC O(1)

class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        ListNode *a = headA, *b = headB;
        
        while(a != b) {
            a = a == NULL ? headB : a -> next;
            b = b == NULL ? headA : b -> next;
        }
        
        return a;
    }
};

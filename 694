// TC O(R x C), SC O(R x C)

// The IDEA: for islands of same shape, say we make an array of integers where if seen 1, we insert 1, else 0.
// Turns out: if two islands are of same shape, both their array will have exactly same pattern of 1s and 0s. 
// Who would have guessed that! 

class Solution {
public:
    int numDistinctIslands(vector<vector<int>>& grid) {
        int islandCount = 0;
        vector<int> pattern;
        vector<vector<int>> seenPatterns;
        
        for(int i = 0; i < grid.size(); i++) {
            for(int j = 0; j < grid[0].size(); j++) {
                if(grid[i][j]) {
                    DFS(grid, pattern, i, j);
                    if(find(seenPatterns.begin(), seenPatterns.end(), pattern) == seenPatterns.end()) {
                        islandCount++;
                        seenPatterns.push_back(pattern);
                    }
                    pattern.clear();
                }
            }
        }
        
        return islandCount;
    }
    void DFS(vector<vector<int>>& grid, vector<int>& pattern, int i, int j) {
        if(i < 0 || i >= grid.size() || j < 0 || j >= grid[0].size() || !grid[i][j]) {
            pattern.push_back(0);
            return;
        }
        grid[i][j] = 0;
        pattern.push_back(1);
        
        DFS(grid, pattern, i - 1, j);
        DFS(grid, pattern, i + 1, j);
        DFS(grid, pattern, i, j - 1);
        DFS(grid, pattern, i, j + 1);
    }
};


// Union-find: there's a bug

class Solution {
public:
    vector<int> parent, rank;
    int numDistinctIslands(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size(), result = 0;
        init_grid(grid);
        
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(!grid[i][j]) continue;
                
                if(i - 1 >= 0 && grid[i - 1][j])
                    Union((i - 1) * n + j, i * n + j);
                if(i + 1 < m && grid[i + 1][j])
                    Union((i + 1) * n + j, i * n + j);
                if(j - 1 >= 0 && grid[i][j - 1])
                    Union((i) * n + j - 1, i * n + j);
                if(j + 1 < n && grid[i][j + 1])
                    Union((i) * n + j + 1, i * n + j);
            }
        }
        
        unordered_map<int, vector<vector<int>>> island_hash;
        
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(!grid[i][j]) continue;
                
                int tmp_parent = find_parent(i * n + j);
                island_hash[tmp_parent].push_back({i, j});
            }
        }
        
        unordered_map<int, vector<int>> island_local_hash;
        for(auto &pair: island_hash) {
            int min_x = INT_MAX, min_y = INT_MAX;
            
            vector<vector<int>> tmp = pair.second;
            for(int i = 0; i < tmp.size(); i++) {
                min_x = min(min_x, tmp[i][0]);
                min_y = min(min_y, tmp[i][1]);
            }
            
            for(int i = 0; i < tmp.size(); i++) {
                island_local_hash[pair.first].push_back((tmp[i][0] - min_x) * n + tmp[i][1] - min_y);
            }
        }
        
        unordered_set<int> distinct_island;
        
        for(auto &pair: island_local_hash) {
            vector<int> tmp = pair.second;
            
            long long hash = 1;
            const int MOD = 1e9 + 7;
            for(auto &p: tmp) {
                hash = (hash * 13 + p) % MOD;
            }
            distinct_island.insert(hash);
        }
        
        return distinct_island.size();
    }
    
    void init_grid(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                parent.push_back(i * n + j);
                if(grid[i][j]) rank.push_back(1);
                else rank.push_back(0);
            }
        }
    }
    
    void Union(int u, int v) {
        int parent_u = find_parent(u), parent_v = find_parent(v);
        
        if(parent_u == parent_v) return;
        
        if(rank[parent_u] < rank[parent_v])
            swap(parent_u, parent_v);
        
        parent[parent_v] = parent_u;
        rank[parent_u] += rank[parent_v];
        rank[parent_v] = 0;
    }
    
    int find_parent(int x) {
        if(parent[x] == x)
            return x;
        
        return parent[x] = find_parent(parent[x]);
    }
};

class Solution {
public:
    int countSubIslands(vector<vector<int>>& grid1, vector<vector<int>>& grid2) {
        int m = grid1.size(), n = grid1[0].size(), count = 0;
        
        for(int i = 0; i < m; i++)
            for(int j = 0; j < n; j++)
                if(grid2[i][j] == 1) {
                    int flag = 1;
                    DFS(grid1, grid2, i, j, flag);
                    if(flag == 1) count++;
                }
        return count;
    }
    
    void DFS(vector<vector<int>>& grid1, vector<vector<int>>& grid2, int i, int j, int& flag) {
        if(i < 0 || i >= grid1.size() || j < 0 || j >= grid1[0].size() || grid2[i][j] == 0) return;
        
        if(grid1[i][j] != grid2[i][j]) flag = 0;
        grid2[i][j] = 0;
        
        DFS(grid1, grid2, i - 1, j, flag);
        DFS(grid1, grid2, i + 1, j, flag);
        DFS(grid1, grid2, i, j - 1, flag);
        DFS(grid1, grid2, i, j + 1, flag);
        
    }
};

// BFS

class Solution {
public:
    int row = 0, col = 0;
    int shortestDistance(vector<vector<int>>& maze, vector<int>& start, vector<int>& destination) {
        this -> row = maze.size(), this -> col = maze[0].size();
        vector<vector<int>> dist(row, vector<int> (col, INT_MAX));
        vector<vector<int>> dir = {{-1, 0}, {1, 0}, {0, 1}, {0, -1}};
        queue<pair<int, int>> Q;
        Q.push({start[0], start[1]});
        dist[start[0]][start[1]] = 0;
        
        while(!Q.empty()) {
            int r = Q.front().first, c = Q.front().second;
            Q.pop();
            
            for(auto &d: dir) {
                int new_r = r + d[0], new_c = c + d[1], count = 0;
                
                while(is_valid(new_r, new_c) && maze[new_r][new_c] != 1) {
                    count++;
                    new_r += d[0], new_c += d[1];
                }
                
                new_r -= d[0], new_c -= d[1];
                if(dist[r][c] + count < dist[new_r][new_c]) {
                    maze[new_r][new_c] = -1;
                    Q.push({new_r, new_c});
                    dist[new_r][new_c] = min(dist[r][c] + count, dist[new_r][new_c]);
                }
            }
        }
        
        return dist[destination[0]][destination[1]] == INT_MAX ? -1 : dist[destination[0]][destination[1]];
    }
    
    bool is_valid(int r, int c) {
        return r >= 0 && r < row && c >= 0 && c < col;
    }
};

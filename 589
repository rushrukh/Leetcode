//Iterative Soln:

class Solution {
public:
    vector<int> preorder(Node* root) {
        
        stack<Node *> st;
        vector<int> pre;
        
        while(root) {
            pre.push_back(root -> val);
            
            int noOfChildrenOfCurrentNode = root -> children.size();
            
            if(noOfChildrenOfCurrentNode > 1) 
                 for(int i = noOfChildrenOfCurrentNode - 1; i > 0; i--) 
                    st.push(root -> children[i]);
            
            root = noOfChildrenOfCurrentNode ? root -> children[0] : NULL;

            if(!root && !st.empty()) {
                root = st.top();
                st.pop();
            }
        }
        
        return pre;
    }
};


//Recursive Soln:

class Solution {
public:
    vector<int> result;
    vector<int> preorder(Node* root) {
        calcPreorder(root);
        
        return result;
    }
    void calcPreorder(Node* root) {
        if(!root) return;
        
        result.push_back(root -> val);
        for(int i = 0; i < root -> children.size(); i++)
            preorder(root -> children[i]);
    }
};

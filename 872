/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    
    vector<int> preOrderTraverSal(TreeNode *root) {
        
        vector <int> leaf;
        unordered_map<TreeNode*, int> preOrder;
        stack<TreeNode*> S;
        
        S.push(root);
        
        while(!S.empty()) {
            TreeNode* curr = S.top();
            
            if(curr == NULL) {
                S.pop();
                continue;
            }
            
            if(preOrder[curr] == 0) 
                if(!curr -> left && !curr -> right)
                    leaf.push_back(curr -> val);
            
            else if(preOrder[curr] == 1)
                S.push(curr -> left);
                
            else if(preOrder[curr] == 2)
                S.push(curr -> right);

            else
                S.pop();
            
            preOrder[curr]++;
        }
        
        return leaf;
        
    }
    
    bool leafSimilar(TreeNode* root1, TreeNode* root2) {
        
        vector<int> leafOne = preOrderTraverSal(root1);
        vector<int> leafTwo = preOrderTraverSal(root2);

        return leafOne == leafTwo;
    }
};

// TC O(N) - each node is visited once, SC O(N) - for the queue [BFS]

class Solution {
public:
    int maxDepth(Node* root) {
        
        if(!root)
            return 0;
        
        queue<pair<Node*,int>> Q;
        Q.push({root, 1});
        
        int maxDepth = INT_MIN;
        
        while(!Q.empty()) {
            Node *tmp = Q.front().first;
            int depthForNow = Q.front().second;
            
            Q.pop();
            
            if(!tmp -> children.empty()) 
                for(auto a : tmp -> children) 
                    Q.push({a, depthForNow + 1});
            
            maxDepth = max(maxDepth, depthForNow);
        }
        
        return maxDepth;
    }
};


// TC O(N) - each node is visited once, SC O(N) - if the tree is skewed, O(logN) if it is balanced [DFS]

class Solution {
public:
    int maxDepth(Node* root) {
        if(!root) return 0;
        
        int result = 0;
        
        for(int i = 0; i < root -> children.size(); i++) {
            result = max(result, maxDepth(root -> children[i]));
        }
        
        return result + 1;
    }
};

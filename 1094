// TC O(NLogN), SC O(N)

class Solution {
public:
    static bool comp(vector<int> A, vector<int> B) {
        return A[1] < B[1];
    }
    bool carPooling(vector<vector<int>>& trips, int capacity) {
        sort(trips.begin(), trips.end(), comp);
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int,int>>> Q;
        int cap = capacity;
        
        for(int i = 0; i < trips.size(); i++) {
            while(!Q.empty() && Q.top().first <= trips[i][1]) {
                cap += Q.top().second;
                Q.pop();
            }
            
            if(trips[i][0] > cap) return false;
            
            cap -= trips[i][0];
            Q.push({trips[i][2], trips[i][0]});
        }
        
        return true;
    }
};

// TC O(N), SC O(N)

class Solution {
public:
    bool carPooling(vector<vector<int>>& trips, int capacity) {
        int far_right = INT_MIN;
        for(auto &trip: trips) far_right = max(far_right, trip[2]);
        
        vector<int> hash(far_right + 1, 0);
        for(auto &trip: trips) {
            hash[trip[1]] += trip[0];
            hash[trip[2]] -= trip[0];
        }
        
        int passenger_count = 0;
        
        for(int &x: hash) {
            passenger_count += x;
            if(passenger_count > capacity) return false;
        }
        
        return true;
    }
};

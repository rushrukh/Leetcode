// TC O(N), SC O(1) where N is the length of the entire vector.

class SparseVector {
public:
    vector<int> v1;
    SparseVector(vector<int> &nums) {
        v1 = nums;
    }
    
    // Return the dotProduct of two sparse vectors
    int dotProduct(SparseVector& vec) {
        int result = 0;
        
        for(int i = 0; i < v1.size(); i++)
            result += v1[i] * vec.v1[i];
        
        return result;
    }
};

// TC: O(N) for creating the hashmap where N is the size of the vector, O(L) for the dot product where L is the number of non-zero elements
// SC: O(L) for storing the hashmap

class SparseVector {
public:
    map<int, int> hash;
    SparseVector(vector<int> &nums) {
        for(int i = 0; i < nums.size(); i++)
            if(nums[i]) hash[i] = nums[i];
    }
    
    // Return the dotProduct of two sparse vectors
    int dotProduct(SparseVector& vec) {
        int result = 0;
        
        for(auto x: hash)
            if(vec.hash.find(x.first) != vec.hash.end())
                result += x.second * vec.hash[x.first];
        
        return result;
    }
};


// Hash solution is good, but it may result in a ton of hashing operations. A better approach is to use array of pairs (idx, val).
// TC: O(N) for creating the hashmap where N is the size of the vector, O(L) for the dot product where L is the number of non-zero elements
// SC: O(L) for storing the pairs

class SparseVector {
public:
    vector<pair<int,int>> pairs;
    SparseVector(vector<int> &nums) {
        for (int i = 0; i < nums.size(); i++)
            if (nums[i]) 
                pairs.push_back({i, nums[i]});
    }
    
    // Return the dotProduct of two sparse vectors
    int dotProduct(SparseVector& vec) {
        int p = 0, q = 0, result = 0;
        
        while(p < pairs.size() && q < vec.pairs.size()) {
            if (pairs[p].first == vec.pairs[q].first) {
                result += pairs[p].second * vec.pairs[q].second;
                p++; q++;
            }
            else if (pairs[p].first < vec.pairs[q].first) p++;
            else q++;
        }
        
        return result;
    }
};


// TC: O(min(m, n) * log(max(m, n))), SC: O(L) where L is the number of non-zero elements

class SparseVector {
public:
    vector<pair<int,int>> pairs;    
    SparseVector(vector<int> &nums) {
        for(int i = 0; i < nums.size(); i++)
            if(nums[i])
                pairs.push_back({i, nums[i]});
    }
    
    // Return the dotProduct of two sparse vectors
    int dotProduct(SparseVector& vec) {
        vector<pair<int, int>> smaller, larger;
        int result = 0;
        
        if(pairs.size() < vec.pairs.size()) {
            smaller = pairs;
            larger = vec.pairs;
        }
        else {
            smaller = vec.pairs;
            larger = pairs;
        }
        
        //for every index in the smaller vector, search the index in the larger vector
        
        for(auto &sPair: smaller) {
            int low = 0, high = larger.size() - 1;
            
            while(low <= high) {
                int mid = low + (high - low) / 2;
                
                if(sPair.first == larger[mid].first) {
                    result += sPair.second * larger[mid].second;
                    break;
                }
                else if(sPair.first < larger[mid].first) high = mid - 1;
                else low = mid + 1;
            }
        }
        
        return result;
    }
};

// Brute Force (TLE), TC O(N^2), SC O(1)

class Solution {
public:
    int maximumSum(vector<int>& nums) {
        int max_sum = -1, n = nums.size();
        
        for(int i = 0; i < n; i++) {
            int curr_digit_sum = getDigitSum(nums[i]);
            
            for(int j = i + 1; j < n; j++) {
                if(getDigitSum(nums[j]) != curr_digit_sum) continue;
                
                max_sum = max(max_sum, nums[i] + nums[j]);
            }
        }
        
        return max_sum;
    }
    int getDigitSum(int x) {
        int digit_sum = 0;
        
        while(x) {
            digit_sum += x % 10;
            x /= 10;
        }
        
        return digit_sum;
    }
};


// TC O(N), SC O(N)

class Solution {
public:
    int maximumSum(vector<int>& nums) {
        int max_sum = -1;
        unordered_map<int, int> hash;
        
        for(int &num: nums) {
            int digitsum = get_digitsum(num);
            
            if(hash.find(digitsum) != hash.end()) {
                max_sum = max(max_sum, num + hash[digitsum]);
                hash[digitsum] = max(hash[digitsum], num);
            }
            else {
                hash[digitsum] = num;
            }
        }
        
        return max_sum;
    }
    
    int get_digitsum(int x) {
        int digitsum = 0;
        
        while(x) {
            digitsum += x % 10;
            x /= 10;
        }
        
        return digitsum;
    }
};

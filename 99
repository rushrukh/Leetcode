/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> in_order;
    int x = -1, y = -1;
    TreeNode *x_node = NULL, *y_node = NULL;
    void recoverTree(TreeNode* root) {
        inorder(root);
        
        bool first_occurrence = false;
        for(int i = 0; i < in_order.size() - 1; i++) {
            if(in_order[i] > in_order[i + 1]) {
                y = in_order[i + 1];
                if(!first_occurrence) {
                    x = in_order[i];
                    first_occurrence = true;
                }
                else break;
            }
        }
        
        inorder(root, true);
        swap(x_node -> val, y_node -> val);
    }
    
    void inorder(TreeNode *root, bool swap=false) {
        if(!root) return;
        inorder(root -> left, swap);
        in_order.push_back(root -> val);
        if(swap && root -> val == x) x_node = root;
        if(swap && root -> val == y) y_node = root;
        inorder(root -> right, swap);
    }
};

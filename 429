/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    vector<vector<int>> levelOrder(Node* root) {
        vector<vector<int>> levelOrder;
        if(!root)
            return levelOrder;
        
        queue<Node*>Q;
        Q.push(root);
        
        while(!Q.empty()) {
            int currentQueueSize = Q.size();
            vector<int> currentLevel;
            for(int i = 0; i < currentQueueSize; i++) {
                Node* currNode = Q.front();
                Q.pop();
                
                if(currNode -> children.size())
                    for(int j = 0; j < currNode -> children.size(); j++)
                        Q.push(currNode -> children[j]);
                    
                currentLevel.push_back(currNode -> val);
            }
            levelOrder.push_back(currentLevel);
        }
        return levelOrder;
    }
};

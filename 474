//Top Down Soln:

class Solution {
public:
    int DP[601][101][101];
    int findMaxForm(vector<string>& strs, int m, int n) {
        memset(DP, -1, sizeof(DP));
        return helper(strs, 0, m, n);
    }
    int helper(vector<string>& strs, int idx, int m, int n) {
        if((!m && !n) || idx == strs.size()) return 0;
        if(DP[idx][m][n] != -1) return DP[idx][m][n];
        
        int countZero = 0, countOne = 0;
        for(auto &x: strs[idx]) x == '1' ? countOne++ : countZero++;
        
        DP[idx][m][n] = helper(strs, idx + 1, m, n);
        if(countZero <= m && countOne <= n) return DP[idx][m][n] = max(1 + helper(strs, idx + 1, m - countZero, n - countOne), DP[idx][m][n]);
        else return DP[idx][m][n];
    }
};

//DP solution as build up for the next problems:

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        vector<vector<int>> v(n, (vector<int> (2, -1)));
        return findProfit(prices, v, 0, 1, 1);
    }
    int findProfit(vector<int>& prices, vector<vector<int>>& v, int i, int transaction, int buy) {
        if(i >= prices.size() || transaction <= 0) return 0;
        if(v[i][buy] != -1) return v[i][buy];
        
        if(buy) return v[i][buy] = max( -prices[i] + findProfit(prices, v, i + 1, 1, 0), findProfit(prices, v, i + 1, 1, 1));
        else return v[i][buy] = max(prices[i] + findProfit(prices, v, i + 1, 0, 1), findProfit(prices, v, i + 1, 1, 0));
    }
};

//Regular solution:

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int mi = INT_MAX;
        int profit = 0;
        for(int i = 0; i < prices.size(); i++) {
            mi = min(mi, prices[i]);
            profit = max(profit, prices[i] - mi);
            
        }
        return profit;
    }
};

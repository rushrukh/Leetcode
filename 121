//DP solution as build up for the next problems:

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        vector<vector<int>> DP(prices.size(), (vector<int>(2, -1)));
        return helper(DP, prices, 0, 1, 1);
    }
    int helper(vector<vector<int>>& DP, vector<int>& prices, int index, int buy, int transaction) {
        if(index == prices.size() || !transaction) return 0;
        if(index == prices.size() - 1 && buy) return 0;
        if(DP[index][buy] != -1) return DP[index][buy];
        
        if(buy) return DP[index][buy] = max(-prices[index] + helper(DP, prices, index + 1, 0, 1), helper(DP, prices, index + 1, 1, 1));
        else return DP[index][buy] = max(prices[index] + helper(DP, prices, index + 1, 1, 0), helper(DP, prices, index + 1, 0, 1));
    }
};

//Regular solution:

class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int mi = INT_MAX;
        int profit = 0;
        for(int i = 0; i < prices.size(); i++) {
            mi = min(mi, prices[i]);
            profit = max(profit, prices[i] - mi);
            
        }
        return profit;
    }
};

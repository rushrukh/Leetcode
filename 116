/*
// Definition for a Node.
class Node {
public:
    int val;
    Node* left;
    Node* right;
    Node* next;

    Node() : val(0), left(NULL), right(NULL), next(NULL) {}

    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}

    Node(int _val, Node* _left, Node* _right, Node* _next)
        : val(_val), left(_left), right(_right), next(_next) {}
};
*/

class Solution {
public:
    Node* connect(Node* root) {
        if(!root) return NULL;
        
        if(root -> left) {
            root -> left -> next = root -> right;
            
            if(root -> next) 
                root -> right -> next = root -> next -> left;
        }
        
        connect(root -> left);
        connect(root -> right);
        
        return root;
        
    }
};


class Solution {
public:
    Node* connect(Node* root) {
        if(!root) return root;
        queue<Node*> Q;
        Q.push(root);
        
        while(!Q.empty()) {
            int n = Q.size();
            
            for(int i = 0; i < n; i++) {
                Node *curr = Q.front();
                Q.pop();
                
                if(i < n - 1) curr -> next = Q.front();
                
                if(curr -> left) Q.push(curr -> left);
                if(curr -> right) Q.push(curr -> right);
            }
        }
        
        return root;
    }
};

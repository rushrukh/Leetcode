/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isCousins(TreeNode* root, int x, int y) {
        
        if(root -> val == x || root -> val == y)
            return false;
        
        queue<TreeNode*> Q;
        Q.push(root);
        unordered_map<int, int> depth;
        
        while(!Q.empty()) {
            TreeNode* curr = Q.front();
            Q.pop();
            int left = 0, right = 0;
            
            if(curr -> left) {
                Q.push(curr -> left);
                depth.insert({curr -> left -> val, depth[curr -> val] + 1});
                left = curr -> left -> val;
            }
            
            if(curr -> right) {
                Q.push(curr -> right);
                depth.insert({curr -> right -> val, depth[curr -> val] + 1});
                right = curr -> right -> val;
            }
            
            if(((left == x) && (right == y)) || (left == y) && (right == x)) 
                return false;
        }
        
        if(depth[x] != depth[y])
            return false;
  
        return true;
    }
};

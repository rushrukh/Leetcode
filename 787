// Dijkstra Solution: TC O(E * log V) 

class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<vector<pair<int,int>>> adjList(n);
        
        //adjList[src] = [{destination, cost}];
        for(auto& flight: flights)
            adjList[flight[0]].push_back({flight[1], flight[2]});
        
        //{distance, node, number_of_stops}
        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> Q;
        Q.push({0, src, 0});
        
        vector<int> stop(n, INT_MAX);
        
        while(!Q.empty()) {
            auto tmp = Q.top();
            Q.pop();
            
            int distance = tmp[0]; int node = tmp[1]; int number_of_stops = tmp[2];
            
            if(number_of_stops > k + 1 || number_of_stops > stop[node]) continue;
            if(node == dst) return distance;
            
            stop[node] = number_of_stops;
            
            for(auto x: adjList[node])
                Q.push({distance + x.second, x.first, number_of_stops + 1});
        }
        
        return -1;
    }
};


// Recursion + Memoization Soln: TC O(V * k), SC O(2 * V * k ) 
class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<vector<pair<int,int>>> adjList(n);
        vector<vector<int>> DP(n + 1, vector<int>(flights.size() + 1, -1));
        
        //adjList[src] = [{destination, cost}];
        for(auto& flight: flights)
            adjList[flight[0]].push_back({flight[1], flight[2]});
        
        int cheapestPrice = DFS(adjList, DP, src, k, dst);
        return cheapestPrice == INT_MAX ? -1 : cheapestPrice;
    }
    
    int DFS(vector<vector<pair<int,int>>>& adjList, vector<vector<int>>& DP, int node, int stop, int dst) {
        if(node == dst) return 0;
        if(stop < 0) return INT_MAX;
        if(DP[node][stop] > -1) return DP[node][stop];
        
        int minPrice = INT_MAX;
        for(int i = 0; i < adjList[node].size(); i++) {
            int price = DFS(adjList, DP, adjList[node][i].first, stop - 1, dst);
            price = price == INT_MAX ? INT_MAX : price + adjList[node][i].second;
            minPrice = min(minPrice, price);
        }
        
        return DP[node][stop] = minPrice;
    }
};


// Bellman Ford Solution: TC O(k * E), SC O(V)

class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<int> distancePrev(n, INT_MAX), distanceNew(n, INT_MAX);
        distancePrev[src] = 0, distanceNew[src] = 0;
       
        for(int i = 0; i < k + 1; i++) {
            for(int j = 0; j < flights.size(); j++) {
                int dU = distancePrev[flights[j][0]], dV = distancePrev[flights[j][1]], dW = flights[j][2];
                if(dU == INT_MAX) continue;
                if(dU + dW <= distanceNew[flights[j][1]]) distanceNew[flights[j][1]] = dU + dW;
            }
            distancePrev = distanceNew;
        }
        return distanceNew[dst] == INT_MAX ? -1 : distanceNew[dst];
    }
};

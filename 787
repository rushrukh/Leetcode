// Dijkstra Solution: TC O(E * log V) 

class Solution {
public:
    int findCheapestPrice(int n, vector<vector<int>>& flights, int src, int dst, int k) {
        vector<vector<pair<int,int>>> adjList(n);
        
        //adjList[src] = [{destination, cost}];
        for(auto& flight: flights)
            adjList[flight[0]].push_back({flight[1], flight[2]});
        
        //{distance, node, number_of_stops}
        priority_queue<vector<int>, vector<vector<int>>, greater<vector<int>>> Q;
        Q.push({0, src, 0});
        
        vector<int> stop(n, INT_MAX);
        
        while(!Q.empty()) {
            auto tmp = Q.top();
            Q.pop();
            
            int distance = tmp[0]; int node = tmp[1]; int number_of_stops = tmp[2];
            
            if(number_of_stops > k + 1 || number_of_stops > stop[node]) continue;
            if(node == dst) return distance;
            
            stop[node] = number_of_stops;
            
            for(auto x: adjList[node])
                Q.push({distance + x.second, x.first, number_of_stops + 1});
        }
        
        return -1;
    }
};

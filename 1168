// Kruskal: TC O((N + M) log (N + M)), SC O(N + M)

class Solution {
public:
    int n = 0;
    vector<int> parent, rank;
    int minCostToSupplyWater(int n, vector<int>& wells, vector<vector<int>>& pipes) {
        this -> n = n;
        init_dsu();
        vector<vector<int>> edges = pipes;
        
        for(int i = 0; i < n; i++) {
            edges.push_back({0, i + 1, wells[i]});
        }
    
        sort(edges.begin(), edges.end(), comp);
        int edges_used = 0, cost = 0;
        
        for(auto &edge: edges) {
            if(edges_used == n) break;
            
            if(Union(edge[0], edge[1])) {
                cost += edge[2];
                edges_used++;
            }
        }
        
        return cost;
    }
    
    bool Union(int u, int v) {
        int parent_u = find_parent(u), parent_v = find_parent(v);
        if(parent_u == parent_v) return false;
        
        if(rank[parent_u] < rank[parent_v]) swap(parent_u, parent_v);
        
        parent[parent_v] = parent_u;
        rank[parent_u] += rank[parent_v];
        rank[parent_v] = 0;
        
        return true;
    }
    
    int find_parent(int x) {
        if(parent[x] == x) return x;
        return parent[x] = find_parent(parent[x]);
    }
    
    void init_dsu() {
        for(int i = 0; i <= n; i++) {
            parent.push_back(i);
            rank.push_back(0);
        }
    }    
        
    static bool comp(vector<int> A, vector<int> B) {
        return A[2] < B[2];
    }
};


// Prims:

class Solution {
public:
    int minCostToSupplyWater(int n, vector<int>& wells, vector<vector<int>>& pipes) {
        vector<bool> visited(n + 1, false);
        unordered_map<int, vector<pair<int, int>>> edges;
        
        for(int i = 0; i < n; i++)
            edges[0].push_back({i + 1, wells[i]});
        
        for(int i = 0; i < pipes.size(); i++) {
            edges[pipes[i][0]].push_back({pipes[i][1], pipes[i][2]});
            edges[pipes[i][1]].push_back({pipes[i][0], pipes[i][2]});
        }
        
        int cost = 0;
        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int,int>>> Q;
        Q.push({0, 0});
        
        while(!Q.empty()) {
            int curr = Q.top().second;
            cost += Q.top().first;
            visited[curr] = true;
            
            for(auto &edge: edges[curr])
                if(!visited[edge.first])
                    Q.push({edge.second, edge.first});
            
            while(!Q.empty() && visited[Q.top().second])
                Q.pop();
        }
        
        return cost;
    }
};


/* 
Watch out for this guy: 
5
[3,5,4,1,2]
[[2,1,1],[3,2,3],[5,3,2]]
*/

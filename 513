/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int findBottomLeftValue(TreeNode* root) {
        queue<TreeNode*> Q;
        Q.push(root);
        int bottomLeft = root -> val;
        
        while(!Q.empty()) {
            int currentQueueSize = Q.size();
            int flag = 0;

            for(int i = 0; i < currentQueueSize; i++) {
                TreeNode* currNode = Q.front();
                Q.pop();
                
                if(currNode -> left) {
                    if(!flag) {
                        bottomLeft = currNode -> left -> val;
                        flag = 1;
                    }    
                    Q.push(currNode -> left);
                }
                if(currNode -> right) {
                    if(!flag) {
                        bottomLeft = currNode -> right -> val;
                        flag = 1;
                    }    
                    Q.push(currNode -> right);
                }
            }
        }
        return bottomLeft;
    }
};

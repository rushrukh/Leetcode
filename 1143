//Top Down Soln: TC O(M*N), SC O(M*N)

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        vector<vector<int>> DP(text1.size(), (vector<int> (text2.size(), -1)));
        return max_length(DP, text1, text2, text1.size() - 1, text2.size() - 1);
    }
    
    int max_length(vector<vector<int>> &DP, string &a, string &b, int i, int j) {
        if(i < 0 || j < 0) return 0;
        if(DP[i][j] != -1) return DP[i][j];
        
        if(a[i] == b[j])
            return DP[i][j] = 1 + max_length(DP, a, b, i - 1, j - 1);
        else 
            return DP[i][j] = max(max_length(DP, a, b, i - 1, j), max_length(DP, a, b, i, j - 1));
    }
};

/Bottom Up Soln: TC O(M*N), SC O(M*N)

class Solution {
public:
    int longestCommonSubsequence(string x, string y) {
        int m = x.size(), n = y.size();
        vector<vector<int>> DP(m + 1, (vector<int> (n + 1, 0)));
        
        for(int i = 1; i <= m; i++) {
            for(int j = 1; j <= n; j++) {
                if(x[i - 1] == y[j - 1]) {
                    DP[i][j] = 1 + DP[i - 1][j - 1];
                }
                else {
                    DP[i][j] = max(DP[i - 1][j], DP[i][j - 1]);
                }
            }
        }
        
        return DP[m][n];
    }
};

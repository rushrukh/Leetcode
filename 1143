//Top Down Soln: TC O(M*N), SC O(M*N)

class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        vector<vector<int>> DP(text1.size(), (vector<int> (text2.size(), -1)));
        return max_length(DP, text1, text2, text1.size() - 1, text2.size() - 1);
    }
    
    int max_length(vector<vector<int>> &DP, string &a, string &b, int i, int j) {
        if(i < 0 || j < 0) return 0;
        if(DP[i][j] != -1) return DP[i][j];
        
        if(a[i] == b[j])
            return DP[i][j] = 1 + max_length(DP, a, b, i - 1, j - 1);
        else 
            return DP[i][j] = max(max_length(DP, a, b, i - 1, j), max_length(DP, a, b, i, j - 1));
    }
};

/Bottom Up Soln:

class Solution {
public:
    int DP[1001][1001];
    int longestCommonSubsequence(string text1, string text2) {
        for(int i = 0; i <= text1.size(); i++)
            for(int j = 0; j <= text2.size(); j++)
                if(i == 0 || j == 0) DP[i][j] = 0;
        
        for(int i = 1; i <= text1.size(); i++)
            for(int j = 1; j <= text2.size(); j++) {
                if(text1[i - 1] == text2[j - 1]) DP[i][j] = 1 + DP[i - 1][j - 1];
                else DP[i][j] = max(DP[i - 1][j], DP[i][j - 1]);
            }
        
        return DP[text1.size()][text2.size()];
    }
};

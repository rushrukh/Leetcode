//Top Down Soln: TC O(M*N), SC O(M*N)

class Solution {
public:
    vector<vector<int>> DP;
    string text1 = "", text2 = "";
    int longestCommonSubsequence(string text1, string text2) {
        int m = text1.size(), n = text2.size();
        DP.assign(m, vector<int> (n, -1));
        this -> text1 = text1;
        this -> text2 = text2;
        
        return find_max(m - 1, n - 1);
    }
    
    int find_max(int i, int j) {
        if(i == -1 || j == - 1) return 0;
        if(DP[i][j] != -1) return DP[i][j];
        
        if(text1[i] == text2[j])
            return DP[i][j] = 1 + find_max(i - 1, j - 1);
        else
            return DP[i][j] = max(find_max(i, j - 1), find_max(i - 1, j));
    }
};

// Bottom Up Soln: TC O(M*N), SC O(M*N)

class Solution {
public:
    int longestCommonSubsequence(string t1, string t2) {
        int m = t1.size(), n = t2.size();
        vector<vector<int>> DP (m + 1, vector<int> (n + 1, 0));
        
        for(int i = 1; i <= m; i++) {
            for(int j = 1; j <= n; j++) {
                if(t1[i - 1] == t2[j - 1])
                    DP[i][j] = 1 + DP[i - 1][j - 1];
                else
                    DP[i][j] = max(DP[i - 1][j], DP[i][j - 1]);
            }
        }
        
        return DP[m][n];
    }
};

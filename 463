class Solution {
public:
    int count = 0;
    int islandPerimeter(vector<vector<int>>& grid) {
        for(int i = 0; i < grid.size(); i++)
            for(int j = 0; j < grid[0].size(); j++)
                if(grid[i][j] == 1) DFS(grid, i, j);
        
        return count;
    }
    int DFS(vector<vector<int>>& grid, int i, int j) {
        if(i < 0 || i >= grid.size() || j < 0 || j >= grid[0].size() || !grid[i][j]) return 0;
        if(grid[i][j] == -1) return 1;
        
        grid[i][j] = -1;
        count += 4;
        
        int top = DFS(grid, i - 1, j);
        int bottom = DFS(grid, i + 1, j);
        int left = DFS(grid, i, j - 1);
        int right = DFS(grid, i, j + 1);
        
        if(top == 1) count -= 1;
        if(bottom == 1) count -= 1;
        if(left == 1) count -= 1;
        if(right == 1) count -= 1;
        
        return 1;
    }
};

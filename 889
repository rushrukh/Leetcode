/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* constructFromPrePost(vector<int>& preorder, vector<int>& postorder) {
        unordered_map<int, int> hashForPost;
        
        for(int i = 0; i < postorder.size(); i++)
            hashForPost[postorder[i]] = i;
        
        int preorderIndex = 0;
        return constructFromPost(hashForPost, preorder, preorderIndex);
    }
    TreeNode* constructFromPost(unordered_map<int, int>& hashForPost, vector<int>& preorder, int& preorderIndex) {
        int curr = preorderIndex++;
        TreeNode* n = new TreeNode(preorder[curr]);
        
        if(preorderIndex < preorder.size() && hashForPost[preorder[preorderIndex]] < hashForPost[preorder[curr]]) 
            n -> left = constructFromPost(hashForPost, preorder, preorderIndex);
        
        else return n;
        
        if(preorderIndex < preorder.size() && hashForPost[preorder[preorderIndex]] < hashForPost[preorder[curr]]) 
            n -> right = constructFromPost(hashForPost, preorder, preorderIndex);
        
        else return n;
        
        return n;
    }
};

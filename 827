// TC O(N*N), SC O(N*N)

class Solution {
public:
    vector<int> parent, rank;
    int largestIsland(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size(), largest_island = 0;
        init_grid(grid);
        
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(!grid[i][j]) continue;
                
                if(i - 1 >= 0 && grid[i - 1][j])
                    Union((i - 1) * n + j, (i) * n + j);
                if(i + 1 < m && grid[i + 1][j])
                    Union((i + 1) * n + j, (i) * n + j);
                if(j - 1 >= 0 && grid[i][j - 1])
                    Union((i) * n + j - 1, (i) * n + j);
                if(j + 1 < n && grid[i][j + 1])
                    Union((i) * n + j + 1, (i) * n + j);
            }
        }
        
        for(int &r: rank) {
            largest_island = max(largest_island, r);
        }
            
        
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j]) continue;
                
                int left = 0;
                int right = 0;
                int top = 0;
                int bottom = 0;
                
                unordered_set<int> trace_parents;
                
                if(i - 1 >= 0 && grid[i - 1][j]) {
                    int tmp_parent = find_parent((i - 1) * n + j);
                    if(trace_parents.find(tmp_parent) == trace_parents.end()) {
                        top = rank[tmp_parent];
                        trace_parents.insert(tmp_parent);
                    }
                }
                    
                if(i + 1 < m && grid[i + 1][j]) {
                    int tmp_parent = find_parent((i + 1) * n + j);
                    if(trace_parents.find(tmp_parent) == trace_parents.end()) {
                        bottom = rank[tmp_parent];
                        trace_parents.insert(tmp_parent);
                    }
                        
                }
                if(j - 1 >= 0 && grid[i][j - 1] ) {
                    int tmp_parent = find_parent((i) * n + j - 1);
                    if(trace_parents.find(tmp_parent) == trace_parents.end()) {
                        left = rank[tmp_parent];
                        trace_parents.insert(tmp_parent);
                    }
                        
                }
                if(j + 1 < n && grid[i][j + 1]) {
                    int tmp_parent = find_parent((i) * n + j + 1);
                    if(trace_parents.find(tmp_parent) == trace_parents.end()) {
                        right = rank[tmp_parent];
                        trace_parents.insert(tmp_parent);
                    }
                        
                }
                 
                largest_island = max(largest_island, left + right + top + bottom + 1);
            }
        }
        
        return largest_island;
    }
    
    void init_grid(vector<vector<int>>& grid) {
        int m = grid.size(), n = grid[0].size();
        
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                parent.push_back(i * n + j);
                
                if(grid[i][j])
                    rank.push_back(1);
                else
                    rank.push_back(0);
            }
        }
    }
    
    void Union(int u, int v) {
        int parent_u = find_parent(u), parent_v = find_parent(v);
        
        if(parent_u == parent_v) return;
        
        if(rank[parent_u] < rank[parent_v])
            swap(parent_u, parent_v);
        
        parent[parent_v] = parent_u;
        rank[parent_u] += rank[parent_v];
        rank[parent_v] = 0;
    }
    
    int find_parent(int x) {
        if(parent[x] == x)
            return x;
        
        return parent[x] = find_parent(parent[x]);
    }
};

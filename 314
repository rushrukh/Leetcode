/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> columnTable;
    static bool comp(vector<int> v1, vector<int> v2) {
        if(v1[1] == v2[1]) return v1[2] < v2[2];
        return v1[1] < v2[1];
    }
    vector<vector<int>> verticalOrder(TreeNode* root) {
        buildColumnTable(root, 0, 0);
        stable_sort(columnTable.begin(), columnTable.end(), comp);
        vector<vector<int>> result;
        
        for(int i = 0; i < columnTable.size(); i++) {
            if(result.empty()) result.push_back({columnTable[i][0]});
            else {
                if(columnTable[i - 1][1] == columnTable[i][1]) result.back().push_back(columnTable[i][0]);
                else result.push_back({columnTable[i][0]});
            }
        }
        
        return result;
    }
    void buildColumnTable(TreeNode* root, int row, int col) {
        if(!root) return;
        columnTable.push_back({root -> val, col, row});
        buildColumnTable(root -> left, row + 1, col - 1);
        buildColumnTable(root -> right, row + 1, col + 1);
    }
};

// TC O(V + E), SC O(V + E)

class Solution {
public:
    int countComponents(int n, vector<vector<int>>& edges) {
        vector<vector<int>> adjList(n);
        
        for(auto edge: edges) {
            adjList[edge[0]].push_back(edge[1]);
            adjList[edge[1]].push_back(edge[0]);
        }
        
        vector<bool> visited (n, false);
        int result = 0;
        
        for(int i = 0; i < n; i++) {
            if(!visited[i]) {
                result++;
                DFS(adjList, i, visited);
            }
        }
        
        return result;
    }
    
    void DFS(vector<vector<int>>& adjList, int currentNode, vector<bool>& visited) {
        visited[currentNode] = true;
        
        for(int i = 0; i < adjList[currentNode].size(); i++) 
            if(!visited[adjList[currentNode][i]])
                DFS(adjList, adjList[currentNode][i], visited);
    }
};


class Solution {
public:
    int n = 0;
    vector<int> parent, rank;
    int countComponents(int n, vector<vector<int>>& edges) {
        this -> n = n;
        init_dsu();
        
        for(auto &edge: edges)
            Union(edge[0], edge[1]);
        
        int count = 0;
        for(int i = 0; i < parent.size(); i++)
            if(parent[i] == i) count++;
        
        return count;
    }
    
    int find_parent(int x) {
        if(parent[x] == x) return x;
        return parent[x] = find_parent(parent[x]);
    }
    
    void Union(int u, int v) {
        int parent_u = find_parent(u), parent_v = find_parent(v);
        if(parent_u == parent_v) return;
        
        if(rank[parent_u] < rank[parent_v]) swap(parent_u, parent_v);
        
        parent[parent_v] = parent_u;
        rank[parent_u] += rank[parent_v];
        rank[parent_v] = 0;
    }
    
    void init_dsu() {
        for(int i = 0; i < n; i++) {
            parent.push_back(i);
            rank.push_back(1);
        }
    }
};

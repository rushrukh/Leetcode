// TC O(N), SC O(1)

class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        int left = 0, min_length = INT_MAX, sum = 0;
        
        for(int right = 0; right < nums.size(); right++) {
            sum += nums[right];
            
            while(sum >= target) {
                min_length = min(min_length, right - left + 1);
                sum -= nums[left++];
            }
        }
        
        return min_length == INT_MAX ? 0: min_length;
    }
};

// TC O(n logn), SC O(1)

class Solution {
public:
    int minSubArrayLen(int target, vector<int>& nums) {
        int n = nums.size(), min_length = INT_MAX;
        vector<int> prefix_sum (n + 1, 0);
        
        for (int i = 0; i < n; i++) {
            prefix_sum[i + 1] = prefix_sum[i] + nums[i];
        }
        
        for(int i = 0; i < n; i++) {
            min_length = min(min_length, search_length(prefix_sum, i + 1, target, prefix_sum[i], n));
        }
        
        return min_length == INT_MAX ? 0 : min_length;
    }
    int search_length(vector<int> &prefix_sum, int starting_index, int target, int buffer, int n) {
        int left = starting_index, right = n, min_length = INT_MAX;
        
        while(left <= right) {
            int mid = left + (right - left) / 2;
            
            if(prefix_sum[mid] - buffer < target) {
                left = mid + 1;
            }
            else {
                min_length = min(min_length, mid - starting_index + 1);
                right = mid - 1;
            }
        }
        
        return min_length;
    }
};

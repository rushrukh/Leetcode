// TC O(N), SC O(N)

class Solution {
public:
    vector<int> parent, rank;
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int n = edges.size();
        init_dsu(n + 1);
        
        for(auto &edge: edges) 
            if(!Union(edge[0], edge[1]))
                return edge;

        return {};
    }
    
    void init_dsu(int n) {
        for(int i = 0; i < n; i++) {
            parent.push_back(i);
            rank.push_back(1);
        }
    }
    
    bool Union(int u, int v) {
        int parent_u = find_parent(u), parent_v = find_parent(v);
        
        if(parent_u == parent_v) return false;
        
        if(rank[parent_u] < rank[parent_v])
            swap(parent_u, parent_v);
        
        parent[parent_v] = parent_u;
        rank[parent_u] += rank[parent_v];
        rank[parent_v] = 0;
        
        return true;
    }
    
    int find_parent(int x) {
        if(parent[x] == x)
            return x;
        
        return parent[x] = find_parent(parent[x]);
    }
};

// TC O(N^2), SC O(N)

class Solution {
public:
    vector<int> findRedundantConnection(vector<vector<int>>& edges) {
        int n = edges.size();
        vector<vector<int>> adj_list(n + 1);
        
        for(auto &edge: edges) {
            vector<bool> visited(n + 1, false);
            
            adj_list[edge[0]].push_back(edge[1]);
            adj_list[edge[1]].push_back(edge[0]);
            
            if(dfs(adj_list, visited, edge[0], -1))
               return edge;
        }
        
        return {};       
    }
    
    bool dfs(vector<vector<int>> &adj_list, vector<bool> &visited, int curr, int parent) {
        if(visited[curr])
            return true;
        
        visited[curr] = true;
        
        for(auto &child: adj_list[curr]) {
            if(child != parent && dfs(adj_list, visited, child, curr))
                return true;
        }
        
        return false;
    }
};
